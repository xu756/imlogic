// Code generated by goctl. DO NOT EDIT.
// Source: conn.proto

package conn

import (
	"context"
	"github.com/xu756/imlogic/internal/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ConnData = pb.ConnData
	ConnResp = pb.ConnResp

	Conn interface {
		// 其他服务调用发送消息
		Send(ctx context.Context, in *ConnData, opts ...grpc.CallOption) (*ConnResp, error)
		// 其他服务调用广播消息
		Broadcast(ctx context.Context, in *ConnData, opts ...grpc.CallOption) (*ConnResp, error)
	}

	defaultConn struct {
		cli zrpc.Client
	}
)

func NewConn(cli zrpc.Client) Conn {
	return &defaultConn{
		cli: cli,
	}
}

// 其他服务调用发送消息
func (m *defaultConn) Send(ctx context.Context, in *ConnData, opts ...grpc.CallOption) (*ConnResp, error) {
	client := pb.NewConnClient(m.cli.Conn())
	return client.Send(ctx, in, opts...)
}

// 其他服务调用广播消息
func (m *defaultConn) Broadcast(ctx context.Context, in *ConnData, opts ...grpc.CallOption) (*ConnResp, error) {
	client := pb.NewConnClient(m.cli.Conn())
	return client.Broadcast(ctx, in, opts...)
}
