// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imlogic/ent/predicate"
	"imlogic/ent/privatemessage"
	"imlogic/kitex_gen/base"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrivateMessageUpdate is the builder for updating PrivateMessage entities.
type PrivateMessageUpdate struct {
	config
	hooks    []Hook
	mutation *PrivateMessageMutation
}

// Where appends a list predicates to the PrivateMessageUpdate builder.
func (pmu *PrivateMessageUpdate) Where(ps ...predicate.PrivateMessage) *PrivateMessageUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetMsgType sets the "msg_type" field.
func (pmu *PrivateMessageUpdate) SetMsgType(i int32) *PrivateMessageUpdate {
	pmu.mutation.ResetMsgType()
	pmu.mutation.SetMsgType(i)
	return pmu
}

// SetNillableMsgType sets the "msg_type" field if the given value is not nil.
func (pmu *PrivateMessageUpdate) SetNillableMsgType(i *int32) *PrivateMessageUpdate {
	if i != nil {
		pmu.SetMsgType(*i)
	}
	return pmu
}

// AddMsgType adds i to the "msg_type" field.
func (pmu *PrivateMessageUpdate) AddMsgType(i int32) *PrivateMessageUpdate {
	pmu.mutation.AddMsgType(i)
	return pmu
}

// SetMsgID sets the "msg_id" field.
func (pmu *PrivateMessageUpdate) SetMsgID(s string) *PrivateMessageUpdate {
	pmu.mutation.SetMsgID(s)
	return pmu
}

// SetNillableMsgID sets the "msg_id" field if the given value is not nil.
func (pmu *PrivateMessageUpdate) SetNillableMsgID(s *string) *PrivateMessageUpdate {
	if s != nil {
		pmu.SetMsgID(*s)
	}
	return pmu
}

// SetChatID sets the "chat_id" field.
func (pmu *PrivateMessageUpdate) SetChatID(i int64) *PrivateMessageUpdate {
	pmu.mutation.ResetChatID()
	pmu.mutation.SetChatID(i)
	return pmu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (pmu *PrivateMessageUpdate) SetNillableChatID(i *int64) *PrivateMessageUpdate {
	if i != nil {
		pmu.SetChatID(*i)
	}
	return pmu
}

// AddChatID adds i to the "chat_id" field.
func (pmu *PrivateMessageUpdate) AddChatID(i int64) *PrivateMessageUpdate {
	pmu.mutation.AddChatID(i)
	return pmu
}

// SetSenderID sets the "sender_id" field.
func (pmu *PrivateMessageUpdate) SetSenderID(i int64) *PrivateMessageUpdate {
	pmu.mutation.ResetSenderID()
	pmu.mutation.SetSenderID(i)
	return pmu
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (pmu *PrivateMessageUpdate) SetNillableSenderID(i *int64) *PrivateMessageUpdate {
	if i != nil {
		pmu.SetSenderID(*i)
	}
	return pmu
}

// AddSenderID adds i to the "sender_id" field.
func (pmu *PrivateMessageUpdate) AddSenderID(i int64) *PrivateMessageUpdate {
	pmu.mutation.AddSenderID(i)
	return pmu
}

// SetTimestamp sets the "timestamp" field.
func (pmu *PrivateMessageUpdate) SetTimestamp(i int64) *PrivateMessageUpdate {
	pmu.mutation.ResetTimestamp()
	pmu.mutation.SetTimestamp(i)
	return pmu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (pmu *PrivateMessageUpdate) SetNillableTimestamp(i *int64) *PrivateMessageUpdate {
	if i != nil {
		pmu.SetTimestamp(*i)
	}
	return pmu
}

// AddTimestamp adds i to the "timestamp" field.
func (pmu *PrivateMessageUpdate) AddTimestamp(i int64) *PrivateMessageUpdate {
	pmu.mutation.AddTimestamp(i)
	return pmu
}

// SetContent sets the "content" field.
func (pmu *PrivateMessageUpdate) SetContent(b *base.Message) *PrivateMessageUpdate {
	pmu.mutation.SetContent(b)
	return pmu
}

// Mutation returns the PrivateMessageMutation object of the builder.
func (pmu *PrivateMessageUpdate) Mutation() *PrivateMessageMutation {
	return pmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PrivateMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PrivateMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PrivateMessageUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PrivateMessageUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmu *PrivateMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(privatemessage.Table, privatemessage.Columns, sqlgraph.NewFieldSpec(privatemessage.FieldID, field.TypeInt))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.MsgType(); ok {
		_spec.SetField(privatemessage.FieldMsgType, field.TypeInt32, value)
	}
	if value, ok := pmu.mutation.AddedMsgType(); ok {
		_spec.AddField(privatemessage.FieldMsgType, field.TypeInt32, value)
	}
	if value, ok := pmu.mutation.MsgID(); ok {
		_spec.SetField(privatemessage.FieldMsgID, field.TypeString, value)
	}
	if value, ok := pmu.mutation.ChatID(); ok {
		_spec.SetField(privatemessage.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedChatID(); ok {
		_spec.AddField(privatemessage.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.SenderID(); ok {
		_spec.SetField(privatemessage.FieldSenderID, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedSenderID(); ok {
		_spec.AddField(privatemessage.FieldSenderID, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.Timestamp(); ok {
		_spec.SetField(privatemessage.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedTimestamp(); ok {
		_spec.AddField(privatemessage.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.Content(); ok {
		_spec.SetField(privatemessage.FieldContent, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PrivateMessageUpdateOne is the builder for updating a single PrivateMessage entity.
type PrivateMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrivateMessageMutation
}

// SetMsgType sets the "msg_type" field.
func (pmuo *PrivateMessageUpdateOne) SetMsgType(i int32) *PrivateMessageUpdateOne {
	pmuo.mutation.ResetMsgType()
	pmuo.mutation.SetMsgType(i)
	return pmuo
}

// SetNillableMsgType sets the "msg_type" field if the given value is not nil.
func (pmuo *PrivateMessageUpdateOne) SetNillableMsgType(i *int32) *PrivateMessageUpdateOne {
	if i != nil {
		pmuo.SetMsgType(*i)
	}
	return pmuo
}

// AddMsgType adds i to the "msg_type" field.
func (pmuo *PrivateMessageUpdateOne) AddMsgType(i int32) *PrivateMessageUpdateOne {
	pmuo.mutation.AddMsgType(i)
	return pmuo
}

// SetMsgID sets the "msg_id" field.
func (pmuo *PrivateMessageUpdateOne) SetMsgID(s string) *PrivateMessageUpdateOne {
	pmuo.mutation.SetMsgID(s)
	return pmuo
}

// SetNillableMsgID sets the "msg_id" field if the given value is not nil.
func (pmuo *PrivateMessageUpdateOne) SetNillableMsgID(s *string) *PrivateMessageUpdateOne {
	if s != nil {
		pmuo.SetMsgID(*s)
	}
	return pmuo
}

// SetChatID sets the "chat_id" field.
func (pmuo *PrivateMessageUpdateOne) SetChatID(i int64) *PrivateMessageUpdateOne {
	pmuo.mutation.ResetChatID()
	pmuo.mutation.SetChatID(i)
	return pmuo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (pmuo *PrivateMessageUpdateOne) SetNillableChatID(i *int64) *PrivateMessageUpdateOne {
	if i != nil {
		pmuo.SetChatID(*i)
	}
	return pmuo
}

// AddChatID adds i to the "chat_id" field.
func (pmuo *PrivateMessageUpdateOne) AddChatID(i int64) *PrivateMessageUpdateOne {
	pmuo.mutation.AddChatID(i)
	return pmuo
}

// SetSenderID sets the "sender_id" field.
func (pmuo *PrivateMessageUpdateOne) SetSenderID(i int64) *PrivateMessageUpdateOne {
	pmuo.mutation.ResetSenderID()
	pmuo.mutation.SetSenderID(i)
	return pmuo
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (pmuo *PrivateMessageUpdateOne) SetNillableSenderID(i *int64) *PrivateMessageUpdateOne {
	if i != nil {
		pmuo.SetSenderID(*i)
	}
	return pmuo
}

// AddSenderID adds i to the "sender_id" field.
func (pmuo *PrivateMessageUpdateOne) AddSenderID(i int64) *PrivateMessageUpdateOne {
	pmuo.mutation.AddSenderID(i)
	return pmuo
}

// SetTimestamp sets the "timestamp" field.
func (pmuo *PrivateMessageUpdateOne) SetTimestamp(i int64) *PrivateMessageUpdateOne {
	pmuo.mutation.ResetTimestamp()
	pmuo.mutation.SetTimestamp(i)
	return pmuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (pmuo *PrivateMessageUpdateOne) SetNillableTimestamp(i *int64) *PrivateMessageUpdateOne {
	if i != nil {
		pmuo.SetTimestamp(*i)
	}
	return pmuo
}

// AddTimestamp adds i to the "timestamp" field.
func (pmuo *PrivateMessageUpdateOne) AddTimestamp(i int64) *PrivateMessageUpdateOne {
	pmuo.mutation.AddTimestamp(i)
	return pmuo
}

// SetContent sets the "content" field.
func (pmuo *PrivateMessageUpdateOne) SetContent(b *base.Message) *PrivateMessageUpdateOne {
	pmuo.mutation.SetContent(b)
	return pmuo
}

// Mutation returns the PrivateMessageMutation object of the builder.
func (pmuo *PrivateMessageUpdateOne) Mutation() *PrivateMessageMutation {
	return pmuo.mutation
}

// Where appends a list predicates to the PrivateMessageUpdate builder.
func (pmuo *PrivateMessageUpdateOne) Where(ps ...predicate.PrivateMessage) *PrivateMessageUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PrivateMessageUpdateOne) Select(field string, fields ...string) *PrivateMessageUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PrivateMessage entity.
func (pmuo *PrivateMessageUpdateOne) Save(ctx context.Context) (*PrivateMessage, error) {
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PrivateMessageUpdateOne) SaveX(ctx context.Context) *PrivateMessage {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PrivateMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PrivateMessageUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmuo *PrivateMessageUpdateOne) sqlSave(ctx context.Context) (_node *PrivateMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(privatemessage.Table, privatemessage.Columns, sqlgraph.NewFieldSpec(privatemessage.FieldID, field.TypeInt))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrivateMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, privatemessage.FieldID)
		for _, f := range fields {
			if !privatemessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != privatemessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.MsgType(); ok {
		_spec.SetField(privatemessage.FieldMsgType, field.TypeInt32, value)
	}
	if value, ok := pmuo.mutation.AddedMsgType(); ok {
		_spec.AddField(privatemessage.FieldMsgType, field.TypeInt32, value)
	}
	if value, ok := pmuo.mutation.MsgID(); ok {
		_spec.SetField(privatemessage.FieldMsgID, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.ChatID(); ok {
		_spec.SetField(privatemessage.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedChatID(); ok {
		_spec.AddField(privatemessage.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.SenderID(); ok {
		_spec.SetField(privatemessage.FieldSenderID, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedSenderID(); ok {
		_spec.AddField(privatemessage.FieldSenderID, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.Timestamp(); ok {
		_spec.SetField(privatemessage.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedTimestamp(); ok {
		_spec.AddField(privatemessage.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.Content(); ok {
		_spec.SetField(privatemessage.FieldContent, field.TypeJSON, value)
	}
	_node = &PrivateMessage{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
