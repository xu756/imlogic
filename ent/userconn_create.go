// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imlogic/ent/userconn"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserConnCreate is the builder for creating a UserConn entity.
type UserConnCreate struct {
	config
	mutation *UserConnMutation
	hooks    []Hook
}

// SetLinkID sets the "link_id" field.
func (ucc *UserConnCreate) SetLinkID(s string) *UserConnCreate {
	ucc.mutation.SetLinkID(s)
	return ucc
}

// SetLinkTime sets the "link_time" field.
func (ucc *UserConnCreate) SetLinkTime(t time.Time) *UserConnCreate {
	ucc.mutation.SetLinkTime(t)
	return ucc
}

// SetNillableLinkTime sets the "link_time" field if the given value is not nil.
func (ucc *UserConnCreate) SetNillableLinkTime(t *time.Time) *UserConnCreate {
	if t != nil {
		ucc.SetLinkTime(*t)
	}
	return ucc
}

// SetUserID sets the "user_id" field.
func (ucc *UserConnCreate) SetUserID(i int64) *UserConnCreate {
	ucc.mutation.SetUserID(i)
	return ucc
}

// SetHostName sets the "host_name" field.
func (ucc *UserConnCreate) SetHostName(s string) *UserConnCreate {
	ucc.mutation.SetHostName(s)
	return ucc
}

// SetNillableHostName sets the "host_name" field if the given value is not nil.
func (ucc *UserConnCreate) SetNillableHostName(s *string) *UserConnCreate {
	if s != nil {
		ucc.SetHostName(*s)
	}
	return ucc
}

// SetDevice sets the "device" field.
func (ucc *UserConnCreate) SetDevice(s string) *UserConnCreate {
	ucc.mutation.SetDevice(s)
	return ucc
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (ucc *UserConnCreate) SetNillableDevice(s *string) *UserConnCreate {
	if s != nil {
		ucc.SetDevice(*s)
	}
	return ucc
}

// SetLastHeartbeatTime sets the "last_heartbeat_time" field.
func (ucc *UserConnCreate) SetLastHeartbeatTime(t time.Time) *UserConnCreate {
	ucc.mutation.SetLastHeartbeatTime(t)
	return ucc
}

// SetNillableLastHeartbeatTime sets the "last_heartbeat_time" field if the given value is not nil.
func (ucc *UserConnCreate) SetNillableLastHeartbeatTime(t *time.Time) *UserConnCreate {
	if t != nil {
		ucc.SetLastHeartbeatTime(*t)
	}
	return ucc
}

// Mutation returns the UserConnMutation object of the builder.
func (ucc *UserConnCreate) Mutation() *UserConnMutation {
	return ucc.mutation
}

// Save creates the UserConn in the database.
func (ucc *UserConnCreate) Save(ctx context.Context) (*UserConn, error) {
	ucc.defaults()
	return withHooks(ctx, ucc.sqlSave, ucc.mutation, ucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserConnCreate) SaveX(ctx context.Context) *UserConn {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserConnCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserConnCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UserConnCreate) defaults() {
	if _, ok := ucc.mutation.LinkTime(); !ok {
		v := userconn.DefaultLinkTime()
		ucc.mutation.SetLinkTime(v)
	}
	if _, ok := ucc.mutation.HostName(); !ok {
		v := userconn.DefaultHostName
		ucc.mutation.SetHostName(v)
	}
	if _, ok := ucc.mutation.Device(); !ok {
		v := userconn.DefaultDevice
		ucc.mutation.SetDevice(v)
	}
	if _, ok := ucc.mutation.LastHeartbeatTime(); !ok {
		v := userconn.DefaultLastHeartbeatTime()
		ucc.mutation.SetLastHeartbeatTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserConnCreate) check() error {
	if _, ok := ucc.mutation.LinkID(); !ok {
		return &ValidationError{Name: "link_id", err: errors.New(`ent: missing required field "UserConn.link_id"`)}
	}
	if _, ok := ucc.mutation.LinkTime(); !ok {
		return &ValidationError{Name: "link_time", err: errors.New(`ent: missing required field "UserConn.link_time"`)}
	}
	if _, ok := ucc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserConn.user_id"`)}
	}
	if _, ok := ucc.mutation.HostName(); !ok {
		return &ValidationError{Name: "host_name", err: errors.New(`ent: missing required field "UserConn.host_name"`)}
	}
	if _, ok := ucc.mutation.Device(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required field "UserConn.device"`)}
	}
	if _, ok := ucc.mutation.LastHeartbeatTime(); !ok {
		return &ValidationError{Name: "last_heartbeat_time", err: errors.New(`ent: missing required field "UserConn.last_heartbeat_time"`)}
	}
	return nil
}

func (ucc *UserConnCreate) sqlSave(ctx context.Context) (*UserConn, error) {
	if err := ucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ucc.mutation.id = &_node.ID
	ucc.mutation.done = true
	return _node, nil
}

func (ucc *UserConnCreate) createSpec() (*UserConn, *sqlgraph.CreateSpec) {
	var (
		_node = &UserConn{config: ucc.config}
		_spec = sqlgraph.NewCreateSpec(userconn.Table, sqlgraph.NewFieldSpec(userconn.FieldID, field.TypeInt))
	)
	if value, ok := ucc.mutation.LinkID(); ok {
		_spec.SetField(userconn.FieldLinkID, field.TypeString, value)
		_node.LinkID = value
	}
	if value, ok := ucc.mutation.LinkTime(); ok {
		_spec.SetField(userconn.FieldLinkTime, field.TypeTime, value)
		_node.LinkTime = value
	}
	if value, ok := ucc.mutation.UserID(); ok {
		_spec.SetField(userconn.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := ucc.mutation.HostName(); ok {
		_spec.SetField(userconn.FieldHostName, field.TypeString, value)
		_node.HostName = value
	}
	if value, ok := ucc.mutation.Device(); ok {
		_spec.SetField(userconn.FieldDevice, field.TypeString, value)
		_node.Device = value
	}
	if value, ok := ucc.mutation.LastHeartbeatTime(); ok {
		_spec.SetField(userconn.FieldLastHeartbeatTime, field.TypeTime, value)
		_node.LastHeartbeatTime = value
	}
	return _node, _spec
}

// UserConnCreateBulk is the builder for creating many UserConn entities in bulk.
type UserConnCreateBulk struct {
	config
	err      error
	builders []*UserConnCreate
}

// Save creates the UserConn entities in the database.
func (uccb *UserConnCreateBulk) Save(ctx context.Context) ([]*UserConn, error) {
	if uccb.err != nil {
		return nil, uccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserConn, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserConnMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserConnCreateBulk) SaveX(ctx context.Context) []*UserConn {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserConnCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserConnCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
