// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"imlogic/ent/userfriend"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserFriend is the model entity for the UserFriend schema.
type UserFriend struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID int64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 用户id
	Owner int64 `json:"owner,omitempty"`
	// 聊天对象
	WithID int64 `json:"with_id,omitempty"`
	// 备注
	Alias string `json:"alias,omitempty"`
	// 描述
	Description  string `json:"description,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserFriend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userfriend.FieldID, userfriend.FieldOwner, userfriend.FieldWithID:
			values[i] = new(sql.NullInt64)
		case userfriend.FieldAlias, userfriend.FieldDescription:
			values[i] = new(sql.NullString)
		case userfriend.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserFriend fields.
func (uf *UserFriend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userfriend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uf.ID = int64(value.Int64)
		case userfriend.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uf.CreatedAt = value.Time
			}
		case userfriend.FieldOwner:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				uf.Owner = value.Int64
			}
		case userfriend.FieldWithID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field with_id", values[i])
			} else if value.Valid {
				uf.WithID = value.Int64
			}
		case userfriend.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				uf.Alias = value.String
			}
		case userfriend.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				uf.Description = value.String
			}
		default:
			uf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserFriend.
// This includes values selected through modifiers, order, etc.
func (uf *UserFriend) Value(name string) (ent.Value, error) {
	return uf.selectValues.Get(name)
}

// Update returns a builder for updating this UserFriend.
// Note that you need to call UserFriend.Unwrap() before calling this method if this UserFriend
// was returned from a transaction, and the transaction was committed or rolled back.
func (uf *UserFriend) Update() *UserFriendUpdateOne {
	return NewUserFriendClient(uf.config).UpdateOne(uf)
}

// Unwrap unwraps the UserFriend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uf *UserFriend) Unwrap() *UserFriend {
	_tx, ok := uf.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserFriend is not a transactional entity")
	}
	uf.config.driver = _tx.drv
	return uf
}

// String implements the fmt.Stringer.
func (uf *UserFriend) String() string {
	var builder strings.Builder
	builder.WriteString("UserFriend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(fmt.Sprintf("%v", uf.Owner))
	builder.WriteString(", ")
	builder.WriteString("with_id=")
	builder.WriteString(fmt.Sprintf("%v", uf.WithID))
	builder.WriteString(", ")
	builder.WriteString("alias=")
	builder.WriteString(uf.Alias)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(uf.Description)
	builder.WriteByte(')')
	return builder.String()
}

// UserFriends is a parsable slice of UserFriend.
type UserFriends []*UserFriend
