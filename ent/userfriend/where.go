// Code generated by ent, DO NOT EDIT.

package userfriend

import (
	"imlogic/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldCreatedAt, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldOwner, v))
}

// WithID applies equality check predicate on the "with_id" field. It's identical to WithIDEQ.
func WithID(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldWithID, v))
}

// Alias applies equality check predicate on the "alias" field. It's identical to AliasEQ.
func Alias(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldAlias, v))
}

// OwnerDesc applies equality check predicate on the "owner_desc" field. It's identical to OwnerDescEQ.
func OwnerDesc(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldOwnerDesc, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLTE(FieldCreatedAt, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLTE(FieldOwner, v))
}

// WithIDEQ applies the EQ predicate on the "with_id" field.
func WithIDEQ(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldWithID, v))
}

// WithIDNEQ applies the NEQ predicate on the "with_id" field.
func WithIDNEQ(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNEQ(FieldWithID, v))
}

// WithIDIn applies the In predicate on the "with_id" field.
func WithIDIn(vs ...int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldIn(FieldWithID, vs...))
}

// WithIDNotIn applies the NotIn predicate on the "with_id" field.
func WithIDNotIn(vs ...int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNotIn(FieldWithID, vs...))
}

// WithIDGT applies the GT predicate on the "with_id" field.
func WithIDGT(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGT(FieldWithID, v))
}

// WithIDGTE applies the GTE predicate on the "with_id" field.
func WithIDGTE(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGTE(FieldWithID, v))
}

// WithIDLT applies the LT predicate on the "with_id" field.
func WithIDLT(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLT(FieldWithID, v))
}

// WithIDLTE applies the LTE predicate on the "with_id" field.
func WithIDLTE(v int64) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLTE(FieldWithID, v))
}

// AliasEQ applies the EQ predicate on the "alias" field.
func AliasEQ(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldAlias, v))
}

// AliasNEQ applies the NEQ predicate on the "alias" field.
func AliasNEQ(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNEQ(FieldAlias, v))
}

// AliasIn applies the In predicate on the "alias" field.
func AliasIn(vs ...string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldIn(FieldAlias, vs...))
}

// AliasNotIn applies the NotIn predicate on the "alias" field.
func AliasNotIn(vs ...string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNotIn(FieldAlias, vs...))
}

// AliasGT applies the GT predicate on the "alias" field.
func AliasGT(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGT(FieldAlias, v))
}

// AliasGTE applies the GTE predicate on the "alias" field.
func AliasGTE(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGTE(FieldAlias, v))
}

// AliasLT applies the LT predicate on the "alias" field.
func AliasLT(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLT(FieldAlias, v))
}

// AliasLTE applies the LTE predicate on the "alias" field.
func AliasLTE(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLTE(FieldAlias, v))
}

// AliasContains applies the Contains predicate on the "alias" field.
func AliasContains(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldContains(FieldAlias, v))
}

// AliasHasPrefix applies the HasPrefix predicate on the "alias" field.
func AliasHasPrefix(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldHasPrefix(FieldAlias, v))
}

// AliasHasSuffix applies the HasSuffix predicate on the "alias" field.
func AliasHasSuffix(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldHasSuffix(FieldAlias, v))
}

// AliasEqualFold applies the EqualFold predicate on the "alias" field.
func AliasEqualFold(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEqualFold(FieldAlias, v))
}

// AliasContainsFold applies the ContainsFold predicate on the "alias" field.
func AliasContainsFold(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldContainsFold(FieldAlias, v))
}

// OwnerDescEQ applies the EQ predicate on the "owner_desc" field.
func OwnerDescEQ(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEQ(FieldOwnerDesc, v))
}

// OwnerDescNEQ applies the NEQ predicate on the "owner_desc" field.
func OwnerDescNEQ(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNEQ(FieldOwnerDesc, v))
}

// OwnerDescIn applies the In predicate on the "owner_desc" field.
func OwnerDescIn(vs ...string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldIn(FieldOwnerDesc, vs...))
}

// OwnerDescNotIn applies the NotIn predicate on the "owner_desc" field.
func OwnerDescNotIn(vs ...string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldNotIn(FieldOwnerDesc, vs...))
}

// OwnerDescGT applies the GT predicate on the "owner_desc" field.
func OwnerDescGT(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGT(FieldOwnerDesc, v))
}

// OwnerDescGTE applies the GTE predicate on the "owner_desc" field.
func OwnerDescGTE(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldGTE(FieldOwnerDesc, v))
}

// OwnerDescLT applies the LT predicate on the "owner_desc" field.
func OwnerDescLT(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLT(FieldOwnerDesc, v))
}

// OwnerDescLTE applies the LTE predicate on the "owner_desc" field.
func OwnerDescLTE(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldLTE(FieldOwnerDesc, v))
}

// OwnerDescContains applies the Contains predicate on the "owner_desc" field.
func OwnerDescContains(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldContains(FieldOwnerDesc, v))
}

// OwnerDescHasPrefix applies the HasPrefix predicate on the "owner_desc" field.
func OwnerDescHasPrefix(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldHasPrefix(FieldOwnerDesc, v))
}

// OwnerDescHasSuffix applies the HasSuffix predicate on the "owner_desc" field.
func OwnerDescHasSuffix(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldHasSuffix(FieldOwnerDesc, v))
}

// OwnerDescEqualFold applies the EqualFold predicate on the "owner_desc" field.
func OwnerDescEqualFold(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldEqualFold(FieldOwnerDesc, v))
}

// OwnerDescContainsFold applies the ContainsFold predicate on the "owner_desc" field.
func OwnerDescContainsFold(v string) predicate.UserFriend {
	return predicate.UserFriend(sql.FieldContainsFold(FieldOwnerDesc, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserFriend) predicate.UserFriend {
	return predicate.UserFriend(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserFriend) predicate.UserFriend {
	return predicate.UserFriend(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserFriend) predicate.UserFriend {
	return predicate.UserFriend(sql.NotPredicates(p))
}
