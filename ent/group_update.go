// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xu756/imlogic/ent/group"
	"github.com/xu756/imlogic/ent/predicate"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GroupUpdate) SetUpdatedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetDeleted sets the "deleted" field.
func (gu *GroupUpdate) SetDeleted(b bool) *GroupUpdate {
	gu.mutation.SetDeleted(b)
	return gu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDeleted(b *bool) *GroupUpdate {
	if b != nil {
		gu.SetDeleted(*b)
	}
	return gu
}

// SetCreator sets the "creator" field.
func (gu *GroupUpdate) SetCreator(i int64) *GroupUpdate {
	gu.mutation.ResetCreator()
	gu.mutation.SetCreator(i)
	return gu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableCreator(i *int64) *GroupUpdate {
	if i != nil {
		gu.SetCreator(*i)
	}
	return gu
}

// AddCreator adds i to the "creator" field.
func (gu *GroupUpdate) AddCreator(i int64) *GroupUpdate {
	gu.mutation.AddCreator(i)
	return gu
}

// SetEditor sets the "editor" field.
func (gu *GroupUpdate) SetEditor(i int64) *GroupUpdate {
	gu.mutation.ResetEditor()
	gu.mutation.SetEditor(i)
	return gu
}

// SetNillableEditor sets the "editor" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableEditor(i *int64) *GroupUpdate {
	if i != nil {
		gu.SetEditor(*i)
	}
	return gu
}

// AddEditor adds i to the "editor" field.
func (gu *GroupUpdate) AddEditor(i int64) *GroupUpdate {
	gu.mutation.AddEditor(i)
	return gu
}

// SetVersion sets the "version" field.
func (gu *GroupUpdate) SetVersion(i int64) *GroupUpdate {
	gu.mutation.ResetVersion()
	gu.mutation.SetVersion(i)
	return gu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableVersion(i *int64) *GroupUpdate {
	if i != nil {
		gu.SetVersion(*i)
	}
	return gu
}

// AddVersion adds i to the "version" field.
func (gu *GroupUpdate) AddVersion(i int64) *GroupUpdate {
	gu.mutation.AddVersion(i)
	return gu
}

// SetParentID sets the "parent_id" field.
func (gu *GroupUpdate) SetParentID(i int64) *GroupUpdate {
	gu.mutation.ResetParentID()
	gu.mutation.SetParentID(i)
	return gu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableParentID(i *int64) *GroupUpdate {
	if i != nil {
		gu.SetParentID(*i)
	}
	return gu
}

// AddParentID adds i to the "parent_id" field.
func (gu *GroupUpdate) AddParentID(i int64) *GroupUpdate {
	gu.mutation.AddParentID(i)
	return gu
}

// SetLevel sets the "level" field.
func (gu *GroupUpdate) SetLevel(i int64) *GroupUpdate {
	gu.mutation.ResetLevel()
	gu.mutation.SetLevel(i)
	return gu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableLevel(i *int64) *GroupUpdate {
	if i != nil {
		gu.SetLevel(*i)
	}
	return gu
}

// AddLevel adds i to the "level" field.
func (gu *GroupUpdate) AddLevel(i int64) *GroupUpdate {
	gu.mutation.AddLevel(i)
	return gu
}

// SetName sets the "name" field.
func (gu *GroupUpdate) SetName(s string) *GroupUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetIntro sets the "intro" field.
func (gu *GroupUpdate) SetIntro(s string) *GroupUpdate {
	gu.mutation.SetIntro(s)
	return gu
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableIntro(s *string) *GroupUpdate {
	if s != nil {
		gu.SetIntro(*s)
	}
	return gu
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GroupUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := group.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Group.name": %w`, err)}
		}
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt64))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.Deleted(); ok {
		_spec.SetField(group.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := gu.mutation.Creator(); ok {
		_spec.SetField(group.FieldCreator, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.AddedCreator(); ok {
		_spec.AddField(group.FieldCreator, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.Editor(); ok {
		_spec.SetField(group.FieldEditor, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.AddedEditor(); ok {
		_spec.AddField(group.FieldEditor, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.Version(); ok {
		_spec.SetField(group.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.AddedVersion(); ok {
		_spec.AddField(group.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.ParentID(); ok {
		_spec.SetField(group.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.AddedParentID(); ok {
		_spec.AddField(group.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.Level(); ok {
		_spec.SetField(group.FieldLevel, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.AddedLevel(); ok {
		_spec.AddField(group.FieldLevel, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Intro(); ok {
		_spec.SetField(group.FieldIntro, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GroupUpdateOne) SetUpdatedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetDeleted sets the "deleted" field.
func (guo *GroupUpdateOne) SetDeleted(b bool) *GroupUpdateOne {
	guo.mutation.SetDeleted(b)
	return guo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDeleted(b *bool) *GroupUpdateOne {
	if b != nil {
		guo.SetDeleted(*b)
	}
	return guo
}

// SetCreator sets the "creator" field.
func (guo *GroupUpdateOne) SetCreator(i int64) *GroupUpdateOne {
	guo.mutation.ResetCreator()
	guo.mutation.SetCreator(i)
	return guo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableCreator(i *int64) *GroupUpdateOne {
	if i != nil {
		guo.SetCreator(*i)
	}
	return guo
}

// AddCreator adds i to the "creator" field.
func (guo *GroupUpdateOne) AddCreator(i int64) *GroupUpdateOne {
	guo.mutation.AddCreator(i)
	return guo
}

// SetEditor sets the "editor" field.
func (guo *GroupUpdateOne) SetEditor(i int64) *GroupUpdateOne {
	guo.mutation.ResetEditor()
	guo.mutation.SetEditor(i)
	return guo
}

// SetNillableEditor sets the "editor" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableEditor(i *int64) *GroupUpdateOne {
	if i != nil {
		guo.SetEditor(*i)
	}
	return guo
}

// AddEditor adds i to the "editor" field.
func (guo *GroupUpdateOne) AddEditor(i int64) *GroupUpdateOne {
	guo.mutation.AddEditor(i)
	return guo
}

// SetVersion sets the "version" field.
func (guo *GroupUpdateOne) SetVersion(i int64) *GroupUpdateOne {
	guo.mutation.ResetVersion()
	guo.mutation.SetVersion(i)
	return guo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableVersion(i *int64) *GroupUpdateOne {
	if i != nil {
		guo.SetVersion(*i)
	}
	return guo
}

// AddVersion adds i to the "version" field.
func (guo *GroupUpdateOne) AddVersion(i int64) *GroupUpdateOne {
	guo.mutation.AddVersion(i)
	return guo
}

// SetParentID sets the "parent_id" field.
func (guo *GroupUpdateOne) SetParentID(i int64) *GroupUpdateOne {
	guo.mutation.ResetParentID()
	guo.mutation.SetParentID(i)
	return guo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableParentID(i *int64) *GroupUpdateOne {
	if i != nil {
		guo.SetParentID(*i)
	}
	return guo
}

// AddParentID adds i to the "parent_id" field.
func (guo *GroupUpdateOne) AddParentID(i int64) *GroupUpdateOne {
	guo.mutation.AddParentID(i)
	return guo
}

// SetLevel sets the "level" field.
func (guo *GroupUpdateOne) SetLevel(i int64) *GroupUpdateOne {
	guo.mutation.ResetLevel()
	guo.mutation.SetLevel(i)
	return guo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableLevel(i *int64) *GroupUpdateOne {
	if i != nil {
		guo.SetLevel(*i)
	}
	return guo
}

// AddLevel adds i to the "level" field.
func (guo *GroupUpdateOne) AddLevel(i int64) *GroupUpdateOne {
	guo.mutation.AddLevel(i)
	return guo
}

// SetName sets the "name" field.
func (guo *GroupUpdateOne) SetName(s string) *GroupUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetIntro sets the "intro" field.
func (guo *GroupUpdateOne) SetIntro(s string) *GroupUpdateOne {
	guo.mutation.SetIntro(s)
	return guo
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableIntro(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetIntro(*s)
	}
	return guo
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	guo.defaults()
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GroupUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := group.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Group.name": %w`, err)}
		}
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt64))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.Deleted(); ok {
		_spec.SetField(group.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := guo.mutation.Creator(); ok {
		_spec.SetField(group.FieldCreator, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.AddedCreator(); ok {
		_spec.AddField(group.FieldCreator, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.Editor(); ok {
		_spec.SetField(group.FieldEditor, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.AddedEditor(); ok {
		_spec.AddField(group.FieldEditor, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.Version(); ok {
		_spec.SetField(group.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.AddedVersion(); ok {
		_spec.AddField(group.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.ParentID(); ok {
		_spec.SetField(group.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.AddedParentID(); ok {
		_spec.AddField(group.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.Level(); ok {
		_spec.SetField(group.FieldLevel, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.AddedLevel(); ok {
		_spec.AddField(group.FieldLevel, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Intro(); ok {
		_spec.SetField(group.FieldIntro, field.TypeString, value)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
