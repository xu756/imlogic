// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imlogic/ent/groupmessage"
	"imlogic/kitex_gen/base"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupMessageCreate is the builder for creating a GroupMessage entity.
type GroupMessageCreate struct {
	config
	mutation *GroupMessageMutation
	hooks    []Hook
}

// SetMsgID sets the "msg_id" field.
func (gmc *GroupMessageCreate) SetMsgID(s string) *GroupMessageCreate {
	gmc.mutation.SetMsgID(s)
	return gmc
}

// SetMsgType sets the "msg_type" field.
func (gmc *GroupMessageCreate) SetMsgType(i int64) *GroupMessageCreate {
	gmc.mutation.SetMsgType(i)
	return gmc
}

// SetSenderID sets the "sender_id" field.
func (gmc *GroupMessageCreate) SetSenderID(i int64) *GroupMessageCreate {
	gmc.mutation.SetSenderID(i)
	return gmc
}

// SetGroupID sets the "group_id" field.
func (gmc *GroupMessageCreate) SetGroupID(i int64) *GroupMessageCreate {
	gmc.mutation.SetGroupID(i)
	return gmc
}

// SetTimestamp sets the "timestamp" field.
func (gmc *GroupMessageCreate) SetTimestamp(i int64) *GroupMessageCreate {
	gmc.mutation.SetTimestamp(i)
	return gmc
}

// SetContent sets the "content" field.
func (gmc *GroupMessageCreate) SetContent(b *base.Message) *GroupMessageCreate {
	gmc.mutation.SetContent(b)
	return gmc
}

// Mutation returns the GroupMessageMutation object of the builder.
func (gmc *GroupMessageCreate) Mutation() *GroupMessageMutation {
	return gmc.mutation
}

// Save creates the GroupMessage in the database.
func (gmc *GroupMessageCreate) Save(ctx context.Context) (*GroupMessage, error) {
	return withHooks(ctx, gmc.sqlSave, gmc.mutation, gmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gmc *GroupMessageCreate) SaveX(ctx context.Context) *GroupMessage {
	v, err := gmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmc *GroupMessageCreate) Exec(ctx context.Context) error {
	_, err := gmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmc *GroupMessageCreate) ExecX(ctx context.Context) {
	if err := gmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gmc *GroupMessageCreate) check() error {
	if _, ok := gmc.mutation.MsgID(); !ok {
		return &ValidationError{Name: "msg_id", err: errors.New(`ent: missing required field "GroupMessage.msg_id"`)}
	}
	if _, ok := gmc.mutation.MsgType(); !ok {
		return &ValidationError{Name: "msg_type", err: errors.New(`ent: missing required field "GroupMessage.msg_type"`)}
	}
	if _, ok := gmc.mutation.SenderID(); !ok {
		return &ValidationError{Name: "sender_id", err: errors.New(`ent: missing required field "GroupMessage.sender_id"`)}
	}
	if _, ok := gmc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "GroupMessage.group_id"`)}
	}
	if _, ok := gmc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "GroupMessage.timestamp"`)}
	}
	if _, ok := gmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "GroupMessage.content"`)}
	}
	return nil
}

func (gmc *GroupMessageCreate) sqlSave(ctx context.Context) (*GroupMessage, error) {
	if err := gmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gmc.mutation.id = &_node.ID
	gmc.mutation.done = true
	return _node, nil
}

func (gmc *GroupMessageCreate) createSpec() (*GroupMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupMessage{config: gmc.config}
		_spec = sqlgraph.NewCreateSpec(groupmessage.Table, sqlgraph.NewFieldSpec(groupmessage.FieldID, field.TypeInt))
	)
	if value, ok := gmc.mutation.MsgID(); ok {
		_spec.SetField(groupmessage.FieldMsgID, field.TypeString, value)
		_node.MsgID = value
	}
	if value, ok := gmc.mutation.MsgType(); ok {
		_spec.SetField(groupmessage.FieldMsgType, field.TypeInt64, value)
		_node.MsgType = value
	}
	if value, ok := gmc.mutation.SenderID(); ok {
		_spec.SetField(groupmessage.FieldSenderID, field.TypeInt64, value)
		_node.SenderID = value
	}
	if value, ok := gmc.mutation.GroupID(); ok {
		_spec.SetField(groupmessage.FieldGroupID, field.TypeInt64, value)
		_node.GroupID = value
	}
	if value, ok := gmc.mutation.Timestamp(); ok {
		_spec.SetField(groupmessage.FieldTimestamp, field.TypeInt64, value)
		_node.Timestamp = value
	}
	if value, ok := gmc.mutation.Content(); ok {
		_spec.SetField(groupmessage.FieldContent, field.TypeJSON, value)
		_node.Content = value
	}
	return _node, _spec
}

// GroupMessageCreateBulk is the builder for creating many GroupMessage entities in bulk.
type GroupMessageCreateBulk struct {
	config
	err      error
	builders []*GroupMessageCreate
}

// Save creates the GroupMessage entities in the database.
func (gmcb *GroupMessageCreateBulk) Save(ctx context.Context) ([]*GroupMessage, error) {
	if gmcb.err != nil {
		return nil, gmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gmcb.builders))
	nodes := make([]*GroupMessage, len(gmcb.builders))
	mutators := make([]Mutator, len(gmcb.builders))
	for i := range gmcb.builders {
		func(i int, root context.Context) {
			builder := gmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gmcb *GroupMessageCreateBulk) SaveX(ctx context.Context) []*GroupMessage {
	v, err := gmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmcb *GroupMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := gmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmcb *GroupMessageCreateBulk) ExecX(ctx context.Context) {
	if err := gmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
