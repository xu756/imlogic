// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imlogic/ent/groupmessage"
	"imlogic/ent/predicate"
	"imlogic/kitex_gen/base"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupMessageUpdate is the builder for updating GroupMessage entities.
type GroupMessageUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMessageMutation
}

// Where appends a list predicates to the GroupMessageUpdate builder.
func (gmu *GroupMessageUpdate) Where(ps ...predicate.GroupMessage) *GroupMessageUpdate {
	gmu.mutation.Where(ps...)
	return gmu
}

// SetMsgType sets the "msg_type" field.
func (gmu *GroupMessageUpdate) SetMsgType(i int32) *GroupMessageUpdate {
	gmu.mutation.ResetMsgType()
	gmu.mutation.SetMsgType(i)
	return gmu
}

// SetNillableMsgType sets the "msg_type" field if the given value is not nil.
func (gmu *GroupMessageUpdate) SetNillableMsgType(i *int32) *GroupMessageUpdate {
	if i != nil {
		gmu.SetMsgType(*i)
	}
	return gmu
}

// AddMsgType adds i to the "msg_type" field.
func (gmu *GroupMessageUpdate) AddMsgType(i int32) *GroupMessageUpdate {
	gmu.mutation.AddMsgType(i)
	return gmu
}

// SetMsgID sets the "msg_id" field.
func (gmu *GroupMessageUpdate) SetMsgID(s string) *GroupMessageUpdate {
	gmu.mutation.SetMsgID(s)
	return gmu
}

// SetNillableMsgID sets the "msg_id" field if the given value is not nil.
func (gmu *GroupMessageUpdate) SetNillableMsgID(s *string) *GroupMessageUpdate {
	if s != nil {
		gmu.SetMsgID(*s)
	}
	return gmu
}

// SetGroupID sets the "group_id" field.
func (gmu *GroupMessageUpdate) SetGroupID(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetGroupID()
	gmu.mutation.SetGroupID(i)
	return gmu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (gmu *GroupMessageUpdate) SetNillableGroupID(i *int64) *GroupMessageUpdate {
	if i != nil {
		gmu.SetGroupID(*i)
	}
	return gmu
}

// AddGroupID adds i to the "group_id" field.
func (gmu *GroupMessageUpdate) AddGroupID(i int64) *GroupMessageUpdate {
	gmu.mutation.AddGroupID(i)
	return gmu
}

// SetTimestamp sets the "timestamp" field.
func (gmu *GroupMessageUpdate) SetTimestamp(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetTimestamp()
	gmu.mutation.SetTimestamp(i)
	return gmu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (gmu *GroupMessageUpdate) SetNillableTimestamp(i *int64) *GroupMessageUpdate {
	if i != nil {
		gmu.SetTimestamp(*i)
	}
	return gmu
}

// AddTimestamp adds i to the "timestamp" field.
func (gmu *GroupMessageUpdate) AddTimestamp(i int64) *GroupMessageUpdate {
	gmu.mutation.AddTimestamp(i)
	return gmu
}

// SetSenderID sets the "sender_id" field.
func (gmu *GroupMessageUpdate) SetSenderID(i int64) *GroupMessageUpdate {
	gmu.mutation.ResetSenderID()
	gmu.mutation.SetSenderID(i)
	return gmu
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (gmu *GroupMessageUpdate) SetNillableSenderID(i *int64) *GroupMessageUpdate {
	if i != nil {
		gmu.SetSenderID(*i)
	}
	return gmu
}

// AddSenderID adds i to the "sender_id" field.
func (gmu *GroupMessageUpdate) AddSenderID(i int64) *GroupMessageUpdate {
	gmu.mutation.AddSenderID(i)
	return gmu
}

// SetContent sets the "content" field.
func (gmu *GroupMessageUpdate) SetContent(b *base.Message) *GroupMessageUpdate {
	gmu.mutation.SetContent(b)
	return gmu
}

// Mutation returns the GroupMessageMutation object of the builder.
func (gmu *GroupMessageUpdate) Mutation() *GroupMessageMutation {
	return gmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gmu *GroupMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gmu.sqlSave, gmu.mutation, gmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gmu *GroupMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := gmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gmu *GroupMessageUpdate) Exec(ctx context.Context) error {
	_, err := gmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmu *GroupMessageUpdate) ExecX(ctx context.Context) {
	if err := gmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmu *GroupMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(groupmessage.Table, groupmessage.Columns, sqlgraph.NewFieldSpec(groupmessage.FieldID, field.TypeInt))
	if ps := gmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmu.mutation.MsgType(); ok {
		_spec.SetField(groupmessage.FieldMsgType, field.TypeInt32, value)
	}
	if value, ok := gmu.mutation.AddedMsgType(); ok {
		_spec.AddField(groupmessage.FieldMsgType, field.TypeInt32, value)
	}
	if value, ok := gmu.mutation.MsgID(); ok {
		_spec.SetField(groupmessage.FieldMsgID, field.TypeString, value)
	}
	if value, ok := gmu.mutation.GroupID(); ok {
		_spec.SetField(groupmessage.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedGroupID(); ok {
		_spec.AddField(groupmessage.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.Timestamp(); ok {
		_spec.SetField(groupmessage.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedTimestamp(); ok {
		_spec.AddField(groupmessage.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.SenderID(); ok {
		_spec.SetField(groupmessage.FieldSenderID, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.AddedSenderID(); ok {
		_spec.AddField(groupmessage.FieldSenderID, field.TypeInt64, value)
	}
	if value, ok := gmu.mutation.Content(); ok {
		_spec.SetField(groupmessage.FieldContent, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gmu.mutation.done = true
	return n, nil
}

// GroupMessageUpdateOne is the builder for updating a single GroupMessage entity.
type GroupMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMessageMutation
}

// SetMsgType sets the "msg_type" field.
func (gmuo *GroupMessageUpdateOne) SetMsgType(i int32) *GroupMessageUpdateOne {
	gmuo.mutation.ResetMsgType()
	gmuo.mutation.SetMsgType(i)
	return gmuo
}

// SetNillableMsgType sets the "msg_type" field if the given value is not nil.
func (gmuo *GroupMessageUpdateOne) SetNillableMsgType(i *int32) *GroupMessageUpdateOne {
	if i != nil {
		gmuo.SetMsgType(*i)
	}
	return gmuo
}

// AddMsgType adds i to the "msg_type" field.
func (gmuo *GroupMessageUpdateOne) AddMsgType(i int32) *GroupMessageUpdateOne {
	gmuo.mutation.AddMsgType(i)
	return gmuo
}

// SetMsgID sets the "msg_id" field.
func (gmuo *GroupMessageUpdateOne) SetMsgID(s string) *GroupMessageUpdateOne {
	gmuo.mutation.SetMsgID(s)
	return gmuo
}

// SetNillableMsgID sets the "msg_id" field if the given value is not nil.
func (gmuo *GroupMessageUpdateOne) SetNillableMsgID(s *string) *GroupMessageUpdateOne {
	if s != nil {
		gmuo.SetMsgID(*s)
	}
	return gmuo
}

// SetGroupID sets the "group_id" field.
func (gmuo *GroupMessageUpdateOne) SetGroupID(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetGroupID()
	gmuo.mutation.SetGroupID(i)
	return gmuo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (gmuo *GroupMessageUpdateOne) SetNillableGroupID(i *int64) *GroupMessageUpdateOne {
	if i != nil {
		gmuo.SetGroupID(*i)
	}
	return gmuo
}

// AddGroupID adds i to the "group_id" field.
func (gmuo *GroupMessageUpdateOne) AddGroupID(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddGroupID(i)
	return gmuo
}

// SetTimestamp sets the "timestamp" field.
func (gmuo *GroupMessageUpdateOne) SetTimestamp(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetTimestamp()
	gmuo.mutation.SetTimestamp(i)
	return gmuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (gmuo *GroupMessageUpdateOne) SetNillableTimestamp(i *int64) *GroupMessageUpdateOne {
	if i != nil {
		gmuo.SetTimestamp(*i)
	}
	return gmuo
}

// AddTimestamp adds i to the "timestamp" field.
func (gmuo *GroupMessageUpdateOne) AddTimestamp(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddTimestamp(i)
	return gmuo
}

// SetSenderID sets the "sender_id" field.
func (gmuo *GroupMessageUpdateOne) SetSenderID(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.ResetSenderID()
	gmuo.mutation.SetSenderID(i)
	return gmuo
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (gmuo *GroupMessageUpdateOne) SetNillableSenderID(i *int64) *GroupMessageUpdateOne {
	if i != nil {
		gmuo.SetSenderID(*i)
	}
	return gmuo
}

// AddSenderID adds i to the "sender_id" field.
func (gmuo *GroupMessageUpdateOne) AddSenderID(i int64) *GroupMessageUpdateOne {
	gmuo.mutation.AddSenderID(i)
	return gmuo
}

// SetContent sets the "content" field.
func (gmuo *GroupMessageUpdateOne) SetContent(b *base.Message) *GroupMessageUpdateOne {
	gmuo.mutation.SetContent(b)
	return gmuo
}

// Mutation returns the GroupMessageMutation object of the builder.
func (gmuo *GroupMessageUpdateOne) Mutation() *GroupMessageMutation {
	return gmuo.mutation
}

// Where appends a list predicates to the GroupMessageUpdate builder.
func (gmuo *GroupMessageUpdateOne) Where(ps ...predicate.GroupMessage) *GroupMessageUpdateOne {
	gmuo.mutation.Where(ps...)
	return gmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gmuo *GroupMessageUpdateOne) Select(field string, fields ...string) *GroupMessageUpdateOne {
	gmuo.fields = append([]string{field}, fields...)
	return gmuo
}

// Save executes the query and returns the updated GroupMessage entity.
func (gmuo *GroupMessageUpdateOne) Save(ctx context.Context) (*GroupMessage, error) {
	return withHooks(ctx, gmuo.sqlSave, gmuo.mutation, gmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gmuo *GroupMessageUpdateOne) SaveX(ctx context.Context) *GroupMessage {
	node, err := gmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gmuo *GroupMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := gmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmuo *GroupMessageUpdateOne) ExecX(ctx context.Context) {
	if err := gmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmuo *GroupMessageUpdateOne) sqlSave(ctx context.Context) (_node *GroupMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(groupmessage.Table, groupmessage.Columns, sqlgraph.NewFieldSpec(groupmessage.FieldID, field.TypeInt))
	id, ok := gmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupmessage.FieldID)
		for _, f := range fields {
			if !groupmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmuo.mutation.MsgType(); ok {
		_spec.SetField(groupmessage.FieldMsgType, field.TypeInt32, value)
	}
	if value, ok := gmuo.mutation.AddedMsgType(); ok {
		_spec.AddField(groupmessage.FieldMsgType, field.TypeInt32, value)
	}
	if value, ok := gmuo.mutation.MsgID(); ok {
		_spec.SetField(groupmessage.FieldMsgID, field.TypeString, value)
	}
	if value, ok := gmuo.mutation.GroupID(); ok {
		_spec.SetField(groupmessage.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedGroupID(); ok {
		_spec.AddField(groupmessage.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.Timestamp(); ok {
		_spec.SetField(groupmessage.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedTimestamp(); ok {
		_spec.AddField(groupmessage.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.SenderID(); ok {
		_spec.SetField(groupmessage.FieldSenderID, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.AddedSenderID(); ok {
		_spec.AddField(groupmessage.FieldSenderID, field.TypeInt64, value)
	}
	if value, ok := gmuo.mutation.Content(); ok {
		_spec.SetField(groupmessage.FieldContent, field.TypeJSON, value)
	}
	_node = &GroupMessage{config: gmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gmuo.mutation.done = true
	return _node, nil
}
