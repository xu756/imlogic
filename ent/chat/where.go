// Code generated by ent, DO NOT EDIT.

package chat

import (
	"imlogic/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUUID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldCreatedAt, v))
}

// User1ID applies equality check predicate on the "user1_id" field. It's identical to User1IDEQ.
func User1ID(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUser1ID, v))
}

// User2ID applies equality check predicate on the "user2_id" field. It's identical to User2IDEQ.
func User2ID(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUser2ID, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContainsFold(FieldUUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldCreatedAt, v))
}

// User1IDEQ applies the EQ predicate on the "user1_id" field.
func User1IDEQ(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUser1ID, v))
}

// User1IDNEQ applies the NEQ predicate on the "user1_id" field.
func User1IDNEQ(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldUser1ID, v))
}

// User1IDIn applies the In predicate on the "user1_id" field.
func User1IDIn(vs ...int64) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldUser1ID, vs...))
}

// User1IDNotIn applies the NotIn predicate on the "user1_id" field.
func User1IDNotIn(vs ...int64) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldUser1ID, vs...))
}

// User1IDGT applies the GT predicate on the "user1_id" field.
func User1IDGT(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldUser1ID, v))
}

// User1IDGTE applies the GTE predicate on the "user1_id" field.
func User1IDGTE(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldUser1ID, v))
}

// User1IDLT applies the LT predicate on the "user1_id" field.
func User1IDLT(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldUser1ID, v))
}

// User1IDLTE applies the LTE predicate on the "user1_id" field.
func User1IDLTE(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldUser1ID, v))
}

// User2IDEQ applies the EQ predicate on the "user2_id" field.
func User2IDEQ(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUser2ID, v))
}

// User2IDNEQ applies the NEQ predicate on the "user2_id" field.
func User2IDNEQ(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldUser2ID, v))
}

// User2IDIn applies the In predicate on the "user2_id" field.
func User2IDIn(vs ...int64) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldUser2ID, vs...))
}

// User2IDNotIn applies the NotIn predicate on the "user2_id" field.
func User2IDNotIn(vs ...int64) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldUser2ID, vs...))
}

// User2IDGT applies the GT predicate on the "user2_id" field.
func User2IDGT(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldUser2ID, v))
}

// User2IDGTE applies the GTE predicate on the "user2_id" field.
func User2IDGTE(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldUser2ID, v))
}

// User2IDLT applies the LT predicate on the "user2_id" field.
func User2IDLT(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldUser2ID, v))
}

// User2IDLTE applies the LTE predicate on the "user2_id" field.
func User2IDLTE(v int64) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldUser2ID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chat) predicate.Chat {
	return predicate.Chat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chat) predicate.Chat {
	return predicate.Chat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chat) predicate.Chat {
	return predicate.Chat(sql.NotPredicates(p))
}
