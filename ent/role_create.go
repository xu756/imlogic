// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"imlogic/ent/role"
)

// RoleCreate is the builder for creating a Role entity.
type RoleCreate struct {
	config
	mutation *RoleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RoleCreate) SetCreatedAt(t time.Time) *RoleCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RoleCreate) SetNillableCreatedAt(t *time.Time) *RoleCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RoleCreate) SetUpdatedAt(t time.Time) *RoleCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RoleCreate) SetNillableUpdatedAt(t *time.Time) *RoleCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeleted sets the "deleted" field.
func (rc *RoleCreate) SetDeleted(b bool) *RoleCreate {
	rc.mutation.SetDeleted(b)
	return rc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (rc *RoleCreate) SetNillableDeleted(b *bool) *RoleCreate {
	if b != nil {
		rc.SetDeleted(*b)
	}
	return rc
}

// SetCreator sets the "creator" field.
func (rc *RoleCreate) SetCreator(i int64) *RoleCreate {
	rc.mutation.SetCreator(i)
	return rc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (rc *RoleCreate) SetNillableCreator(i *int64) *RoleCreate {
	if i != nil {
		rc.SetCreator(*i)
	}
	return rc
}

// SetEditor sets the "editor" field.
func (rc *RoleCreate) SetEditor(i int64) *RoleCreate {
	rc.mutation.SetEditor(i)
	return rc
}

// SetNillableEditor sets the "editor" field if the given value is not nil.
func (rc *RoleCreate) SetNillableEditor(i *int64) *RoleCreate {
	if i != nil {
		rc.SetEditor(*i)
	}
	return rc
}

// SetVersion sets the "version" field.
func (rc *RoleCreate) SetVersion(i int64) *RoleCreate {
	rc.mutation.SetVersion(i)
	return rc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (rc *RoleCreate) SetNillableVersion(i *int64) *RoleCreate {
	if i != nil {
		rc.SetVersion(*i)
	}
	return rc
}

// SetParentID sets the "parent_id" field.
func (rc *RoleCreate) SetParentID(i int64) *RoleCreate {
	rc.mutation.SetParentID(i)
	return rc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (rc *RoleCreate) SetNillableParentID(i *int64) *RoleCreate {
	if i != nil {
		rc.SetParentID(*i)
	}
	return rc
}

// SetLevel sets the "level" field.
func (rc *RoleCreate) SetLevel(i int64) *RoleCreate {
	rc.mutation.SetLevel(i)
	return rc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (rc *RoleCreate) SetNillableLevel(i *int64) *RoleCreate {
	if i != nil {
		rc.SetLevel(*i)
	}
	return rc
}

// SetRoleName sets the "role_name" field.
func (rc *RoleCreate) SetRoleName(s string) *RoleCreate {
	rc.mutation.SetRoleName(s)
	return rc
}

// SetIntro sets the "intro" field.
func (rc *RoleCreate) SetIntro(s string) *RoleCreate {
	rc.mutation.SetIntro(s)
	return rc
}

// SetID sets the "id" field.
func (rc *RoleCreate) SetID(i int64) *RoleCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the RoleMutation object of the builder.
func (rc *RoleCreate) Mutation() *RoleMutation {
	return rc.mutation
}

// Save creates the Role in the database.
func (rc *RoleCreate) Save(ctx context.Context) (*Role, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoleCreate) SaveX(ctx context.Context) *Role {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RoleCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RoleCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RoleCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := role.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := role.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Deleted(); !ok {
		v := role.DefaultDeleted
		rc.mutation.SetDeleted(v)
	}
	if _, ok := rc.mutation.Creator(); !ok {
		v := role.DefaultCreator
		rc.mutation.SetCreator(v)
	}
	if _, ok := rc.mutation.Editor(); !ok {
		v := role.DefaultEditor
		rc.mutation.SetEditor(v)
	}
	if _, ok := rc.mutation.Version(); !ok {
		v := role.DefaultVersion
		rc.mutation.SetVersion(v)
	}
	if _, ok := rc.mutation.ParentID(); !ok {
		v := role.DefaultParentID
		rc.mutation.SetParentID(v)
	}
	if _, ok := rc.mutation.Level(); !ok {
		v := role.DefaultLevel
		rc.mutation.SetLevel(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RoleCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Role.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Role.updated_at"`)}
	}
	if _, ok := rc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Role.deleted"`)}
	}
	if _, ok := rc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required field "Role.creator"`)}
	}
	if _, ok := rc.mutation.Editor(); !ok {
		return &ValidationError{Name: "editor", err: errors.New(`ent: missing required field "Role.editor"`)}
	}
	if _, ok := rc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Role.version"`)}
	}
	if _, ok := rc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "Role.parent_id"`)}
	}
	if _, ok := rc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Role.level"`)}
	}
	if _, ok := rc.mutation.RoleName(); !ok {
		return &ValidationError{Name: "role_name", err: errors.New(`ent: missing required field "Role.role_name"`)}
	}
	if v, ok := rc.mutation.RoleName(); ok {
		if err := role.RoleNameValidator(v); err != nil {
			return &ValidationError{Name: "role_name", err: fmt.Errorf(`ent: validator failed for field "Role.role_name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Intro(); !ok {
		return &ValidationError{Name: "intro", err: errors.New(`ent: missing required field "Role.intro"`)}
	}
	return nil
}

func (rc *RoleCreate) sqlSave(ctx context.Context) (*Role, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RoleCreate) createSpec() (*Role, *sqlgraph.CreateSpec) {
	var (
		_node = &Role{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(role.Table, sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(role.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Deleted(); ok {
		_spec.SetField(role.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := rc.mutation.Creator(); ok {
		_spec.SetField(role.FieldCreator, field.TypeInt64, value)
		_node.Creator = value
	}
	if value, ok := rc.mutation.Editor(); ok {
		_spec.SetField(role.FieldEditor, field.TypeInt64, value)
		_node.Editor = value
	}
	if value, ok := rc.mutation.Version(); ok {
		_spec.SetField(role.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := rc.mutation.ParentID(); ok {
		_spec.SetField(role.FieldParentID, field.TypeInt64, value)
		_node.ParentID = value
	}
	if value, ok := rc.mutation.Level(); ok {
		_spec.SetField(role.FieldLevel, field.TypeInt64, value)
		_node.Level = value
	}
	if value, ok := rc.mutation.RoleName(); ok {
		_spec.SetField(role.FieldRoleName, field.TypeString, value)
		_node.RoleName = value
	}
	if value, ok := rc.mutation.Intro(); ok {
		_spec.SetField(role.FieldIntro, field.TypeString, value)
		_node.Intro = value
	}
	return _node, _spec
}

// RoleCreateBulk is the builder for creating many Role entities in bulk.
type RoleCreateBulk struct {
	config
	err      error
	builders []*RoleCreate
}

// Save creates the Role entities in the database.
func (rcb *RoleCreateBulk) Save(ctx context.Context) ([]*Role, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Role, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RoleCreateBulk) SaveX(ctx context.Context) []*Role {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RoleCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RoleCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
