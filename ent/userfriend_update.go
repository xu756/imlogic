// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imlogic/ent/predicate"
	"imlogic/ent/userfriend"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFriendUpdate is the builder for updating UserFriend entities.
type UserFriendUpdate struct {
	config
	hooks    []Hook
	mutation *UserFriendMutation
}

// Where appends a list predicates to the UserFriendUpdate builder.
func (ufu *UserFriendUpdate) Where(ps ...predicate.UserFriend) *UserFriendUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetOwner sets the "owner" field.
func (ufu *UserFriendUpdate) SetOwner(i int64) *UserFriendUpdate {
	ufu.mutation.ResetOwner()
	ufu.mutation.SetOwner(i)
	return ufu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (ufu *UserFriendUpdate) SetNillableOwner(i *int64) *UserFriendUpdate {
	if i != nil {
		ufu.SetOwner(*i)
	}
	return ufu
}

// AddOwner adds i to the "owner" field.
func (ufu *UserFriendUpdate) AddOwner(i int64) *UserFriendUpdate {
	ufu.mutation.AddOwner(i)
	return ufu
}

// SetWithID sets the "with_id" field.
func (ufu *UserFriendUpdate) SetWithID(i int64) *UserFriendUpdate {
	ufu.mutation.ResetWithID()
	ufu.mutation.SetWithID(i)
	return ufu
}

// SetNillableWithID sets the "with_id" field if the given value is not nil.
func (ufu *UserFriendUpdate) SetNillableWithID(i *int64) *UserFriendUpdate {
	if i != nil {
		ufu.SetWithID(*i)
	}
	return ufu
}

// AddWithID adds i to the "with_id" field.
func (ufu *UserFriendUpdate) AddWithID(i int64) *UserFriendUpdate {
	ufu.mutation.AddWithID(i)
	return ufu
}

// SetAgree sets the "agree" field.
func (ufu *UserFriendUpdate) SetAgree(b bool) *UserFriendUpdate {
	ufu.mutation.SetAgree(b)
	return ufu
}

// SetNillableAgree sets the "agree" field if the given value is not nil.
func (ufu *UserFriendUpdate) SetNillableAgree(b *bool) *UserFriendUpdate {
	if b != nil {
		ufu.SetAgree(*b)
	}
	return ufu
}

// SetAlias sets the "alias" field.
func (ufu *UserFriendUpdate) SetAlias(s string) *UserFriendUpdate {
	ufu.mutation.SetAlias(s)
	return ufu
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (ufu *UserFriendUpdate) SetNillableAlias(s *string) *UserFriendUpdate {
	if s != nil {
		ufu.SetAlias(*s)
	}
	return ufu
}

// SetOwnerDesc sets the "owner_desc" field.
func (ufu *UserFriendUpdate) SetOwnerDesc(s string) *UserFriendUpdate {
	ufu.mutation.SetOwnerDesc(s)
	return ufu
}

// SetNillableOwnerDesc sets the "owner_desc" field if the given value is not nil.
func (ufu *UserFriendUpdate) SetNillableOwnerDesc(s *string) *UserFriendUpdate {
	if s != nil {
		ufu.SetOwnerDesc(*s)
	}
	return ufu
}

// Mutation returns the UserFriendMutation object of the builder.
func (ufu *UserFriendUpdate) Mutation() *UserFriendMutation {
	return ufu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UserFriendUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufu.sqlSave, ufu.mutation, ufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UserFriendUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UserFriendUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UserFriendUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufu *UserFriendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfriend.Table, userfriend.Columns, sqlgraph.NewFieldSpec(userfriend.FieldID, field.TypeInt64))
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.Owner(); ok {
		_spec.SetField(userfriend.FieldOwner, field.TypeInt64, value)
	}
	if value, ok := ufu.mutation.AddedOwner(); ok {
		_spec.AddField(userfriend.FieldOwner, field.TypeInt64, value)
	}
	if value, ok := ufu.mutation.WithID(); ok {
		_spec.SetField(userfriend.FieldWithID, field.TypeInt64, value)
	}
	if value, ok := ufu.mutation.AddedWithID(); ok {
		_spec.AddField(userfriend.FieldWithID, field.TypeInt64, value)
	}
	if value, ok := ufu.mutation.Agree(); ok {
		_spec.SetField(userfriend.FieldAgree, field.TypeBool, value)
	}
	if value, ok := ufu.mutation.Alias(); ok {
		_spec.SetField(userfriend.FieldAlias, field.TypeString, value)
	}
	if value, ok := ufu.mutation.OwnerDesc(); ok {
		_spec.SetField(userfriend.FieldOwnerDesc, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfriend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufu.mutation.done = true
	return n, nil
}

// UserFriendUpdateOne is the builder for updating a single UserFriend entity.
type UserFriendUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFriendMutation
}

// SetOwner sets the "owner" field.
func (ufuo *UserFriendUpdateOne) SetOwner(i int64) *UserFriendUpdateOne {
	ufuo.mutation.ResetOwner()
	ufuo.mutation.SetOwner(i)
	return ufuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (ufuo *UserFriendUpdateOne) SetNillableOwner(i *int64) *UserFriendUpdateOne {
	if i != nil {
		ufuo.SetOwner(*i)
	}
	return ufuo
}

// AddOwner adds i to the "owner" field.
func (ufuo *UserFriendUpdateOne) AddOwner(i int64) *UserFriendUpdateOne {
	ufuo.mutation.AddOwner(i)
	return ufuo
}

// SetWithID sets the "with_id" field.
func (ufuo *UserFriendUpdateOne) SetWithID(i int64) *UserFriendUpdateOne {
	ufuo.mutation.ResetWithID()
	ufuo.mutation.SetWithID(i)
	return ufuo
}

// SetNillableWithID sets the "with_id" field if the given value is not nil.
func (ufuo *UserFriendUpdateOne) SetNillableWithID(i *int64) *UserFriendUpdateOne {
	if i != nil {
		ufuo.SetWithID(*i)
	}
	return ufuo
}

// AddWithID adds i to the "with_id" field.
func (ufuo *UserFriendUpdateOne) AddWithID(i int64) *UserFriendUpdateOne {
	ufuo.mutation.AddWithID(i)
	return ufuo
}

// SetAgree sets the "agree" field.
func (ufuo *UserFriendUpdateOne) SetAgree(b bool) *UserFriendUpdateOne {
	ufuo.mutation.SetAgree(b)
	return ufuo
}

// SetNillableAgree sets the "agree" field if the given value is not nil.
func (ufuo *UserFriendUpdateOne) SetNillableAgree(b *bool) *UserFriendUpdateOne {
	if b != nil {
		ufuo.SetAgree(*b)
	}
	return ufuo
}

// SetAlias sets the "alias" field.
func (ufuo *UserFriendUpdateOne) SetAlias(s string) *UserFriendUpdateOne {
	ufuo.mutation.SetAlias(s)
	return ufuo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (ufuo *UserFriendUpdateOne) SetNillableAlias(s *string) *UserFriendUpdateOne {
	if s != nil {
		ufuo.SetAlias(*s)
	}
	return ufuo
}

// SetOwnerDesc sets the "owner_desc" field.
func (ufuo *UserFriendUpdateOne) SetOwnerDesc(s string) *UserFriendUpdateOne {
	ufuo.mutation.SetOwnerDesc(s)
	return ufuo
}

// SetNillableOwnerDesc sets the "owner_desc" field if the given value is not nil.
func (ufuo *UserFriendUpdateOne) SetNillableOwnerDesc(s *string) *UserFriendUpdateOne {
	if s != nil {
		ufuo.SetOwnerDesc(*s)
	}
	return ufuo
}

// Mutation returns the UserFriendMutation object of the builder.
func (ufuo *UserFriendUpdateOne) Mutation() *UserFriendMutation {
	return ufuo.mutation
}

// Where appends a list predicates to the UserFriendUpdate builder.
func (ufuo *UserFriendUpdateOne) Where(ps ...predicate.UserFriend) *UserFriendUpdateOne {
	ufuo.mutation.Where(ps...)
	return ufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UserFriendUpdateOne) Select(field string, fields ...string) *UserFriendUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UserFriend entity.
func (ufuo *UserFriendUpdateOne) Save(ctx context.Context) (*UserFriend, error) {
	return withHooks(ctx, ufuo.sqlSave, ufuo.mutation, ufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UserFriendUpdateOne) SaveX(ctx context.Context) *UserFriend {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UserFriendUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UserFriendUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufuo *UserFriendUpdateOne) sqlSave(ctx context.Context) (_node *UserFriend, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfriend.Table, userfriend.Columns, sqlgraph.NewFieldSpec(userfriend.FieldID, field.TypeInt64))
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFriend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfriend.FieldID)
		for _, f := range fields {
			if !userfriend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfriend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.Owner(); ok {
		_spec.SetField(userfriend.FieldOwner, field.TypeInt64, value)
	}
	if value, ok := ufuo.mutation.AddedOwner(); ok {
		_spec.AddField(userfriend.FieldOwner, field.TypeInt64, value)
	}
	if value, ok := ufuo.mutation.WithID(); ok {
		_spec.SetField(userfriend.FieldWithID, field.TypeInt64, value)
	}
	if value, ok := ufuo.mutation.AddedWithID(); ok {
		_spec.AddField(userfriend.FieldWithID, field.TypeInt64, value)
	}
	if value, ok := ufuo.mutation.Agree(); ok {
		_spec.SetField(userfriend.FieldAgree, field.TypeBool, value)
	}
	if value, ok := ufuo.mutation.Alias(); ok {
		_spec.SetField(userfriend.FieldAlias, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.OwnerDesc(); ok {
		_spec.SetField(userfriend.FieldOwnerDesc, field.TypeString, value)
	}
	_node = &UserFriend{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfriend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufuo.mutation.done = true
	return _node, nil
}
