syntax = "proto3";

package pb;
option go_package = "./pb";

//DetailType 元事件类型
enum DetailType{
  CONNECT = 0;  //连接
  DISCONNECT = 1; //断开
  UPDATE = 2; //状态更新
  DECRYPT = 3;  //解密错误
}
//MessageContentType 消息内容类型
enum MessageContentType {
  // 图文
  Text = 0;
  // Markdown
  Markdown = 1;
  // 图片
  Image = 2;
  // 语音
  Voice = 3;
  // 视频
  Video = 4;

  // 正在输入
  Typing = 101;
  // 已读
  Read = 102;
  // 撤回
  Recall = 103;
}

//ConversationType 会话类型
enum ConversationType {
  // 单聊
  Single = 0;
  // 群聊
  Group = 1;
  // 订阅号
  Subscription = 2;
}

//发送者
message Sender {
  //发送者id
  string id = 1;
  //发送者名称
  string name = 2;
  //发送者头像
  string avatar = 3;
  //extra
  string extra = 11;
}

//NoticeContentType 通知内容类型
enum NoticeContentType {
  // 有新的好友请求
  NewFriendRequest = 0;
  // 加入到了新群
  JoinNewGroup = 1;
  // 在线状态
  OnlineStatus = 2;
}





//Notice 通知
message Notice {
  //通知id 因为通知永远都是服务端发送给客户端的，所以通知id一定唯一。
  string noticeId = 1;
  //发送到哪个会话
  string conversationId = 2; // 单聊: 那么该值为发送者和接受者的id；群聊：那么该值为群id；订阅号：那么该值为订阅号id
  //会话类型
  ConversationType conversationType = 3;
  //通知内容
  string content = 4;
  //通知类型
  NoticeContentType contentType = 5;
  //通知的更新时间
  int64 updateTime = 6;
  //排序
  int64 sort = 7;
}


message ImMeta {
  DetailType DetailType = 1;//元事件 连接 断开 状态更新 解密错误
  string ConnId = 2; //连接ID
  int64 UserId = 3; // 用户id
  int64 Role = 4; // 权限
  string Ip = 5; //IP
  string Issue = 6; //设备谁颁布的jwt
  string Version = 7; //版本
  string ImServer = 8; //连接的服务器
  bytes Data = 9; //数据
}






//Message 消息
message Message {
  //MessageId 消息id 由服务端插入时生成
  string messageId = 1;
  //UUID 客户端生成的id 由客户端生成 在客户端保证唯一性
  string uuid = 2;

  //发送到哪个会话
  string conversationId = 3; // 单聊: 那么该值为接受者的id；群聊：那么该值为群id；订阅号：那么该值为订阅号id
  //会话类型
  ConversationType conversationType = 4;
  Sender sender = 5; // 有可能是系统 那么该值为空
  //消息内容
  bytes content = 6;
  //消息类型
  MessageContentType contentType = 7;

  //发送时间 由客户端生成
  int64 sendTime = 8;
  //插入时间 由服务端生成
  int64 insertTime = 9;
  //在会话中的消息顺序
  int64 seq = 10;
  //是否需要解密 （端对端加密技术，服务端无法解密）
  bool needDecrypt = 11;
  //消息是否需要计入未读数
  bool countUnread = 12;
}




// 元事件返回的数据
message MetaResp {
  bool ok = 1;
}
// im返回的数据
message MsgResp {
  bool ok = 1;
  Message message = 2;
}

service Chat {
  //元事件 连接 断开 状态更新 解密错误
  rpc Meta (ImMeta) returns (MetaResp);
  //im消息
  rpc Msg (Message) returns (MsgResp);
}