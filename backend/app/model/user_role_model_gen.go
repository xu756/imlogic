// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRoleFieldNames          = builder.RawFieldNames(&UserRole{})
	userRoleRows                = strings.Join(userRoleFieldNames, ",")
	userRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(userRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(userRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserRoleIdPrefix = "cache:userRole:id:"
)

type (
	userRoleModel interface {
		Insert(ctx context.Context, data *UserRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserRole, error)
		Update(ctx context.Context, data *UserRole) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserRoleModel struct {
		sqlc.CachedConn
		table string
	}

	UserRole struct {
		Id      int64 `db:"id"`      // ID
		UserId  int64 `db:"user_id"` // 用户ID
		RoleId  int64 `db:"role_id"` // 角色ID
		Created int64 `db:"created"` // 创建时间
		Creator int64 `db:"creator"` // 创建人
		Edited  int64 `db:"edited"`  // 修改时间
		Editor  int64 `db:"editor"`  // 修改人
		Deleted int64 `db:"deleted"` // 逻辑删除:0=未删除,1=已删除
	}
)

func newUserRoleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserRoleModel {
	return &defaultUserRoleModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_role`",
	}
}

func (m *defaultUserRoleModel) withSession(session sqlx.Session) *defaultUserRoleModel {
	return &defaultUserRoleModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`user_role`",
	}
}

func (m *defaultUserRoleModel) Delete(ctx context.Context, id int64) error {
	userRoleIdKey := fmt.Sprintf("%s%v", cacheUserRoleIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userRoleIdKey)
	return err
}

func (m *defaultUserRoleModel) FindOne(ctx context.Context, id int64) (*UserRole, error) {
	userRoleIdKey := fmt.Sprintf("%s%v", cacheUserRoleIdPrefix, id)
	var resp UserRole
	err := m.QueryRowCtx(ctx, &resp, userRoleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRoleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleModel) Insert(ctx context.Context, data *UserRole) (sql.Result, error) {
	userRoleIdKey := fmt.Sprintf("%s%v", cacheUserRoleIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userRoleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.RoleId, data.Created, data.Creator, data.Edited, data.Editor, data.Deleted)
	}, userRoleIdKey)
	return ret, err
}

func (m *defaultUserRoleModel) Update(ctx context.Context, data *UserRole) error {
	userRoleIdKey := fmt.Sprintf("%s%v", cacheUserRoleIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRoleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.RoleId, data.Created, data.Creator, data.Edited, data.Editor, data.Deleted, data.Id)
	}, userRoleIdKey)
	return err
}

func (m *defaultUserRoleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserRoleIdPrefix, primary)
}

func (m *defaultUserRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserRoleModel) tableName() string {
	return m.table
}
