// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountFieldNames          = builder.RawFieldNames(&Account{})
	accountRows                = strings.Join(accountFieldNames, ",")
	accountRowsExpectAutoSet   = strings.Join(stringx.Remove(accountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	accountRowsWithPlaceHolder = strings.Join(stringx.Remove(accountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAccountIdPrefix = "cache:account:id:"
)

type (
	accountModel interface {
		Insert(ctx context.Context, data *Account) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Account, error)
		Update(ctx context.Context, data *Account) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountModel struct {
		sqlc.CachedConn
		table string
	}

	Account struct {
		Id       int64         `db:"id"`        // 账号ID
		UserId   int64         `db:"user_id"`   // 用户ID
		OpenCode string        `db:"open_code"` // 登录账号,如手机号等
		Category sql.NullInt64 `db:"category"`  // 账号类别
		Created  int64         `db:"created"`   // 创建时间
		Creator  int64         `db:"creator"`   // 创建人
		Edited   int64         `db:"edited"`    // 修改时间
		Editor   int64         `db:"editor"`    // 修改人
		Deleted  float64       `db:"deleted"`   // 逻辑删除:0=未删除,1=已删除
	}
)

func newAccountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAccountModel {
	return &defaultAccountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`account`",
	}
}

func (m *defaultAccountModel) withSession(session sqlx.Session) *defaultAccountModel {
	return &defaultAccountModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`account`",
	}
}

func (m *defaultAccountModel) Delete(ctx context.Context, id int64) error {
	accountIdKey := fmt.Sprintf("%s%v", cacheAccountIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, accountIdKey)
	return err
}

func (m *defaultAccountModel) FindOne(ctx context.Context, id int64) (*Account, error) {
	accountIdKey := fmt.Sprintf("%s%v", cacheAccountIdPrefix, id)
	var resp Account
	err := m.QueryRowCtx(ctx, &resp, accountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) Insert(ctx context.Context, data *Account) (sql.Result, error) {
	accountIdKey := fmt.Sprintf("%s%v", cacheAccountIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, accountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.OpenCode, data.Category, data.Created, data.Creator, data.Edited, data.Editor, data.Deleted)
	}, accountIdKey)
	return ret, err
}

func (m *defaultAccountModel) Update(ctx context.Context, data *Account) error {
	accountIdKey := fmt.Sprintf("%s%v", cacheAccountIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.OpenCode, data.Category, data.Created, data.Creator, data.Edited, data.Editor, data.Deleted, data.Id)
	}, accountIdKey)
	return err
}

func (m *defaultAccountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAccountIdPrefix, primary)
}

func (m *defaultAccountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAccountModel) tableName() string {
	return m.table
}
