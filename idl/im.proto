syntax = "proto3";

option go_package = "im";
package im;


// 聊天类型
enum ChatType {
    PrivateChat = 0;
    GroupChat = 1;
    SystemMessage = 2;
    SystemNotice =3;
}

// 消息类型
enum MsgType {
    Text = 0;
    Image = 1;
    File = 2;
    Audio = 3;
    Video = 4;
}
// 媒体类型
message MediaType {
    string uid = 1;
    string url = 2;
}



// websocket状态
enum WsStatus{
    Connect = 0;
    Disconnect = 1;
    Heartbeat = 2;
} 



// 元消息
message MetaMsg {
    string link_id = 1;
    int64 user_id = 2;
    WsStatus status = 3;
    string host_name = 4;
    string  device= 5;

}

// 返回消息
message MessageRes {
    bool success = 1;
    string msg_id = 2;
}



// 消息
message Message {
    string link_id = 1;
    string msg_id = 2;
    int64 timestamp = 3;
    ChatType chat_type = 4;
    int64 sender = 5;
    int64 chat_id = 6;
    int64 group_id = 7;
    string content = 8;
    MsgType msg_type = 9;
    repeated MediaType media = 10;
}

// 发送消息给单个用户
message SendMsgTooneReq {
    string link_id = 1;
    Message message = 2;
}

// 发送消息给多个用户
message SendMsgToGroupReq {
    repeated string link_ids = 1;
    Message message = 2;
}

// 发送消息给多个用户失败的用户
message SendMsgToGroupRes {
    repeated string link_ids = 1;
}


// 处理websocket消息
service ImSrv {
    // 元消息
    rpc MetaMessage(MetaMsg) returns (MessageRes) {}
    // 消息
    rpc PushMessage(Message) returns (MessageRes) {}
}

// 发送消息
service ImServer{
    // 发送消息给单个用户
    rpc SendMsgToOne(SendMsgTooneReq) returns (MessageRes) {}
    // 发送消息给多个用户
    rpc SendMsgToGroup(SendMsgToGroupReq) returns (SendMsgToGroupRes) {}
    // 发送消息给所有用户
    rpc SendMsgToAll(Message) returns (MessageRes) {}
}
