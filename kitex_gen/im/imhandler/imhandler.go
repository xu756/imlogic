// Code generated by Kitex v0.8.0. DO NOT EDIT.

package imhandler

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "imlogic/kitex_gen/base"
	im "imlogic/kitex_gen/im"
)

func serviceInfo() *kitex.ServiceInfo {
	return imHandlerServiceInfo
}

var imHandlerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ImHandler"
	handlerType := (*im.ImHandler)(nil)
	methods := map[string]kitex.MethodInfo{
		"MetaMessage":           kitex.NewMethodInfo(metaMessageHandler, newImHandlerMetaMessageArgs, newImHandlerMetaMessageResult, false),
		"HandlerPrivateMessage": kitex.NewMethodInfo(handlerPrivateMessageHandler, newImHandlerHandlerPrivateMessageArgs, newImHandlerHandlerPrivateMessageResult, false),
		"HandlerGroupMessage":   kitex.NewMethodInfo(handlerGroupMessageHandler, newImHandlerHandlerGroupMessageArgs, newImHandlerHandlerGroupMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "im",
		"ServiceFilePath": `idl/im.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func metaMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*im.ImHandlerMetaMessageArgs)
	realResult := result.(*im.ImHandlerMetaMessageResult)
	success, err := handler.(im.ImHandler).MetaMessage(ctx, realArg.MetaMsg)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImHandlerMetaMessageArgs() interface{} {
	return im.NewImHandlerMetaMessageArgs()
}

func newImHandlerMetaMessageResult() interface{} {
	return im.NewImHandlerMetaMessageResult()
}

func handlerPrivateMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*im.ImHandlerHandlerPrivateMessageArgs)
	realResult := result.(*im.ImHandlerHandlerPrivateMessageResult)
	success, err := handler.(im.ImHandler).HandlerPrivateMessage(ctx, realArg.Message)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImHandlerHandlerPrivateMessageArgs() interface{} {
	return im.NewImHandlerHandlerPrivateMessageArgs()
}

func newImHandlerHandlerPrivateMessageResult() interface{} {
	return im.NewImHandlerHandlerPrivateMessageResult()
}

func handlerGroupMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*im.ImHandlerHandlerGroupMessageArgs)
	realResult := result.(*im.ImHandlerHandlerGroupMessageResult)
	success, err := handler.(im.ImHandler).HandlerGroupMessage(ctx, realArg.Message)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImHandlerHandlerGroupMessageArgs() interface{} {
	return im.NewImHandlerHandlerGroupMessageArgs()
}

func newImHandlerHandlerGroupMessageResult() interface{} {
	return im.NewImHandlerHandlerGroupMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MetaMessage(ctx context.Context, metaMsg *base.MetaMsg) (r *im.MessageRes, err error) {
	var _args im.ImHandlerMetaMessageArgs
	_args.MetaMsg = metaMsg
	var _result im.ImHandlerMetaMessageResult
	if err = p.c.Call(ctx, "MetaMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HandlerPrivateMessage(ctx context.Context, message *base.Message) (r *im.MessageRes, err error) {
	var _args im.ImHandlerHandlerPrivateMessageArgs
	_args.Message = message
	var _result im.ImHandlerHandlerPrivateMessageResult
	if err = p.c.Call(ctx, "HandlerPrivateMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HandlerGroupMessage(ctx context.Context, message *base.Message) (r *im.MessageRes, err error) {
	var _args im.ImHandlerHandlerGroupMessageArgs
	_args.Message = message
	var _result im.ImHandlerHandlerGroupMessageResult
	if err = p.c.Call(ctx, "HandlerGroupMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
