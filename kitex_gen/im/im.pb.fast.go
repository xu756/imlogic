// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package im

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *MsgMeta) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MsgMeta[number], err)
}

func (x *MsgMeta) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.DetailType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MsgMeta) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MsgMeta) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Interval, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MsgContent) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MsgContent[number], err)
}

func (x *MsgContent) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.DetailType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MsgContent) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MsgContent) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ImgUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MsgContent) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AudioUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MsgContent) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.VideoUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message[number], err)
}

func (x *Message) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MsgId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Device, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Timestamp, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	if x.Params == nil {
		x.Params = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Params[key] = value
	return offset, nil
}

func (x *Message) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Action, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.From, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.To, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.MsgType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v MsgMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MsgMeta = &v
	return offset, nil
}

func (x *Message) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	var v MsgContent
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MsgContent = &v
	return offset, nil
}

func (x *MessageRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MessageRes[number], err)
}

func (x *MessageRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MsgId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageRes) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.From, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageRes) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.To, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MessageRes) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MsgMeta) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *MsgMeta) fastWriteField1(buf []byte) (offset int) {
	if x.DetailType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetDetailType())
	return offset
}

func (x *MsgMeta) fastWriteField2(buf []byte) (offset int) {
	if x.Version == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetVersion())
	return offset
}

func (x *MsgMeta) fastWriteField3(buf []byte) (offset int) {
	if x.Interval == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetInterval())
	return offset
}

func (x *MsgContent) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *MsgContent) fastWriteField1(buf []byte) (offset int) {
	if x.DetailType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetDetailType())
	return offset
}

func (x *MsgContent) fastWriteField2(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetText())
	return offset
}

func (x *MsgContent) fastWriteField3(buf []byte) (offset int) {
	if x.ImgUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetImgUrl())
	return offset
}

func (x *MsgContent) fastWriteField4(buf []byte) (offset int) {
	if x.AudioUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAudioUrl())
	return offset
}

func (x *MsgContent) fastWriteField5(buf []byte) (offset int) {
	if x.VideoUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetVideoUrl())
	return offset
}

func (x *Message) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *Message) fastWriteField1(buf []byte) (offset int) {
	if x.MsgId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMsgId())
	return offset
}

func (x *Message) fastWriteField2(buf []byte) (offset int) {
	if x.Device == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDevice())
	return offset
}

func (x *Message) fastWriteField3(buf []byte) (offset int) {
	if x.Timestamp == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetTimestamp())
	return offset
}

func (x *Message) fastWriteField4(buf []byte) (offset int) {
	if x.Params == nil {
		return offset
	}
	for k, v := range x.GetParams() {
		offset += fastpb.WriteMapEntry(buf[offset:], 4,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField5(buf []byte) (offset int) {
	if x.Action == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetAction())
	return offset
}

func (x *Message) fastWriteField6(buf []byte) (offset int) {
	if x.From == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetFrom())
	return offset
}

func (x *Message) fastWriteField7(buf []byte) (offset int) {
	if x.To == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetTo())
	return offset
}

func (x *Message) fastWriteField8(buf []byte) (offset int) {
	if x.MsgType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetMsgType())
	return offset
}

func (x *Message) fastWriteField9(buf []byte) (offset int) {
	if x.MsgMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 9, x.GetMsgMeta())
	return offset
}

func (x *Message) fastWriteField10(buf []byte) (offset int) {
	if x.MsgContent == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 10, x.GetMsgContent())
	return offset
}

func (x *MessageRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *MessageRes) fastWriteField1(buf []byte) (offset int) {
	if x.MsgId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMsgId())
	return offset
}

func (x *MessageRes) fastWriteField2(buf []byte) (offset int) {
	if x.From == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFrom())
	return offset
}

func (x *MessageRes) fastWriteField3(buf []byte) (offset int) {
	if x.To == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTo())
	return offset
}

func (x *MessageRes) fastWriteField4(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetSuccess())
	return offset
}

func (x *MsgMeta) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *MsgMeta) sizeField1() (n int) {
	if x.DetailType == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetDetailType())
	return n
}

func (x *MsgMeta) sizeField2() (n int) {
	if x.Version == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetVersion())
	return n
}

func (x *MsgMeta) sizeField3() (n int) {
	if x.Interval == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetInterval())
	return n
}

func (x *MsgContent) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *MsgContent) sizeField1() (n int) {
	if x.DetailType == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetDetailType())
	return n
}

func (x *MsgContent) sizeField2() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetText())
	return n
}

func (x *MsgContent) sizeField3() (n int) {
	if x.ImgUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetImgUrl())
	return n
}

func (x *MsgContent) sizeField4() (n int) {
	if x.AudioUrl == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAudioUrl())
	return n
}

func (x *MsgContent) sizeField5() (n int) {
	if x.VideoUrl == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetVideoUrl())
	return n
}

func (x *Message) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *Message) sizeField1() (n int) {
	if x.MsgId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMsgId())
	return n
}

func (x *Message) sizeField2() (n int) {
	if x.Device == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDevice())
	return n
}

func (x *Message) sizeField3() (n int) {
	if x.Timestamp == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetTimestamp())
	return n
}

func (x *Message) sizeField4() (n int) {
	if x.Params == nil {
		return n
	}
	for k, v := range x.GetParams() {
		n += fastpb.SizeMapEntry(4,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Message) sizeField5() (n int) {
	if x.Action == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetAction())
	return n
}

func (x *Message) sizeField6() (n int) {
	if x.From == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetFrom())
	return n
}

func (x *Message) sizeField7() (n int) {
	if x.To == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetTo())
	return n
}

func (x *Message) sizeField8() (n int) {
	if x.MsgType == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetMsgType())
	return n
}

func (x *Message) sizeField9() (n int) {
	if x.MsgMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(9, x.GetMsgMeta())
	return n
}

func (x *Message) sizeField10() (n int) {
	if x.MsgContent == nil {
		return n
	}
	n += fastpb.SizeMessage(10, x.GetMsgContent())
	return n
}

func (x *MessageRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *MessageRes) sizeField1() (n int) {
	if x.MsgId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMsgId())
	return n
}

func (x *MessageRes) sizeField2() (n int) {
	if x.From == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFrom())
	return n
}

func (x *MessageRes) sizeField3() (n int) {
	if x.To == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTo())
	return n
}

func (x *MessageRes) sizeField4() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(4, x.GetSuccess())
	return n
}

var fieldIDToName_MsgMeta = map[int32]string{
	1: "DetailType",
	2: "Version",
	3: "Interval",
}

var fieldIDToName_MsgContent = map[int32]string{
	1: "DetailType",
	2: "Text",
	3: "ImgUrl",
	4: "AudioUrl",
	5: "VideoUrl",
}

var fieldIDToName_Message = map[int32]string{
	1:  "MsgId",
	2:  "Device",
	3:  "Timestamp",
	4:  "Params",
	5:  "Action",
	6:  "From",
	7:  "To",
	8:  "MsgType",
	9:  "MsgMeta",
	10: "MsgContent",
}

var fieldIDToName_MessageRes = map[int32]string{
	1: "MsgId",
	2: "From",
	3: "To",
	4: "Success",
}
