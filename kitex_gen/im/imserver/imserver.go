// Code generated by Kitex v0.8.0. DO NOT EDIT.

package imserver

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "imlogic/kitex_gen/base"
	im "imlogic/kitex_gen/im"
)

func serviceInfo() *kitex.ServiceInfo {
	return imServerServiceInfo
}

var imServerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ImServer"
	handlerType := (*im.ImServer)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendMsgToOne":   kitex.NewMethodInfo(sendMsgToOneHandler, newImServerSendMsgToOneArgs, newImServerSendMsgToOneResult, false),
		"SendMsgToGroup": kitex.NewMethodInfo(sendMsgToGroupHandler, newImServerSendMsgToGroupArgs, newImServerSendMsgToGroupResult, false),
		"SendMsgToAll":   kitex.NewMethodInfo(sendMsgToAllHandler, newImServerSendMsgToAllArgs, newImServerSendMsgToAllResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "im",
		"ServiceFilePath": `idl/im.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func sendMsgToOneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*im.ImServerSendMsgToOneArgs)
	realResult := result.(*im.ImServerSendMsgToOneResult)
	success, err := handler.(im.ImServer).SendMsgToOne(ctx, realArg.SendMsgToOneReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImServerSendMsgToOneArgs() interface{} {
	return im.NewImServerSendMsgToOneArgs()
}

func newImServerSendMsgToOneResult() interface{} {
	return im.NewImServerSendMsgToOneResult()
}

func sendMsgToGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*im.ImServerSendMsgToGroupArgs)
	realResult := result.(*im.ImServerSendMsgToGroupResult)
	success, err := handler.(im.ImServer).SendMsgToGroup(ctx, realArg.SendMsgToGroupReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImServerSendMsgToGroupArgs() interface{} {
	return im.NewImServerSendMsgToGroupArgs()
}

func newImServerSendMsgToGroupResult() interface{} {
	return im.NewImServerSendMsgToGroupResult()
}

func sendMsgToAllHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*im.ImServerSendMsgToAllArgs)
	realResult := result.(*im.ImServerSendMsgToAllResult)
	success, err := handler.(im.ImServer).SendMsgToAll(ctx, realArg.Message)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImServerSendMsgToAllArgs() interface{} {
	return im.NewImServerSendMsgToAllArgs()
}

func newImServerSendMsgToAllResult() interface{} {
	return im.NewImServerSendMsgToAllResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMsgToOne(ctx context.Context, sendMsgToOneReq *im.SendMsgToOneReq) (r *im.MessageRes, err error) {
	var _args im.ImServerSendMsgToOneArgs
	_args.SendMsgToOneReq = sendMsgToOneReq
	var _result im.ImServerSendMsgToOneResult
	if err = p.c.Call(ctx, "SendMsgToOne", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMsgToGroup(ctx context.Context, sendMsgToGroupReq *im.SendMsgToGroupReq) (r *im.SendMsgToGroupRes, err error) {
	var _args im.ImServerSendMsgToGroupArgs
	_args.SendMsgToGroupReq = sendMsgToGroupReq
	var _result im.ImServerSendMsgToGroupResult
	if err = p.c.Call(ctx, "SendMsgToGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMsgToAll(ctx context.Context, message *base.Message) (r *im.MessageRes, err error) {
	var _args im.ImServerSendMsgToAllArgs
	_args.Message = message
	var _result im.ImServerSendMsgToAllResult
	if err = p.c.Call(ctx, "SendMsgToAll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
