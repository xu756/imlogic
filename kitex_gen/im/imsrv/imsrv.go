// Code generated by Kitex v0.8.0. DO NOT EDIT.

package imsrv

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	im "github.com/xu756/imlogic/kitex_gen/im"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return imSrvServiceInfo
}

var imSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ImSrv"
	handlerType := (*im.ImSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"Receive": kitex.NewMethodInfo(receiveHandler, newReceiveArgs, newReceiveResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "im",
		"ServiceFilePath": ``,
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func receiveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &imSrvReceiveServer{st}
	return handler.(im.ImSrv).Receive(stream)
}

type imSrvReceiveClient struct {
	streaming.Stream
}

func (x *imSrvReceiveClient) Send(m *im.Message) error {
	return x.Stream.SendMsg(m)
}
func (x *imSrvReceiveClient) CloseAndRecv() (*im.MessageRes, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(im.MessageRes)
	return m, x.Stream.RecvMsg(m)
}

type imSrvReceiveServer struct {
	streaming.Stream
}

func (x *imSrvReceiveServer) SendAndClose(m *im.MessageRes) error {
	return x.Stream.SendMsg(m)
}

func (x *imSrvReceiveServer) Recv() (*im.Message, error) {
	m := new(im.Message)
	return m, x.Stream.RecvMsg(m)
}

func newReceiveArgs() interface{} {
	return &ReceiveArgs{}
}

func newReceiveResult() interface{} {
	return &ReceiveResult{}
}

type ReceiveArgs struct {
	Req *im.Message
}

func (p *ReceiveArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(im.Message)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReceiveArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReceiveArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReceiveArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReceiveArgs) Unmarshal(in []byte) error {
	msg := new(im.Message)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReceiveArgs_Req_DEFAULT *im.Message

func (p *ReceiveArgs) GetReq() *im.Message {
	if !p.IsSetReq() {
		return ReceiveArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReceiveArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReceiveArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReceiveResult struct {
	Success *im.MessageRes
}

var ReceiveResult_Success_DEFAULT *im.MessageRes

func (p *ReceiveResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(im.MessageRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReceiveResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReceiveResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReceiveResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReceiveResult) Unmarshal(in []byte) error {
	msg := new(im.MessageRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReceiveResult) GetSuccess() *im.MessageRes {
	if !p.IsSetSuccess() {
		return ReceiveResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReceiveResult) SetSuccess(x interface{}) {
	p.Success = x.(*im.MessageRes)
}

func (p *ReceiveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReceiveResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Receive(ctx context.Context) (ImSrv_ReceiveClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Receive", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &imSrvReceiveClient{res.Stream}
	return stream, nil
}
