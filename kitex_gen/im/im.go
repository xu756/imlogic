// Code generated by thriftgo (0.3.5). DO NOT EDIT.

package im

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"imlogic/kitex_gen/base"
	"strings"
)

type SendMsgToOneReq struct {
	LinkId  string        `thrift:"link_id,1" frugal:"1,default,string" json:"link_id"`
	Message *base.Message `thrift:"message,2" frugal:"2,default,base.Message" json:"message"`
}

func NewSendMsgToOneReq() *SendMsgToOneReq {
	return &SendMsgToOneReq{}
}

func (p *SendMsgToOneReq) InitDefault() {
	*p = SendMsgToOneReq{}
}

func (p *SendMsgToOneReq) GetLinkId() (v string) {
	return p.LinkId
}

var SendMsgToOneReq_Message_DEFAULT *base.Message

func (p *SendMsgToOneReq) GetMessage() (v *base.Message) {
	if !p.IsSetMessage() {
		return SendMsgToOneReq_Message_DEFAULT
	}
	return p.Message
}
func (p *SendMsgToOneReq) SetLinkId(val string) {
	p.LinkId = val
}
func (p *SendMsgToOneReq) SetMessage(val *base.Message) {
	p.Message = val
}

var fieldIDToName_SendMsgToOneReq = map[int16]string{
	1: "link_id",
	2: "message",
}

func (p *SendMsgToOneReq) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SendMsgToOneReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SendMsgToOneReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SendMsgToOneReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LinkId = v
	}
	return nil
}
func (p *SendMsgToOneReq) ReadField2(iprot thrift.TProtocol) error {
	p.Message = base.NewMessage()
	if err := p.Message.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SendMsgToOneReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToOneReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SendMsgToOneReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("link_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LinkId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SendMsgToOneReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Message.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SendMsgToOneReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMsgToOneReq(%+v)", *p)

}

func (p *SendMsgToOneReq) DeepEqual(ano *SendMsgToOneReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LinkId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *SendMsgToOneReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LinkId, src) != 0 {
		return false
	}
	return true
}
func (p *SendMsgToOneReq) Field2DeepEqual(src *base.Message) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}

type SendMsgToGroupReq struct {
	LinkIds []string      `thrift:"link_ids,1" frugal:"1,default,list<string>" json:"link_ids"`
	Message *base.Message `thrift:"message,2" frugal:"2,default,base.Message" json:"message"`
}

func NewSendMsgToGroupReq() *SendMsgToGroupReq {
	return &SendMsgToGroupReq{}
}

func (p *SendMsgToGroupReq) InitDefault() {
	*p = SendMsgToGroupReq{}
}

func (p *SendMsgToGroupReq) GetLinkIds() (v []string) {
	return p.LinkIds
}

var SendMsgToGroupReq_Message_DEFAULT *base.Message

func (p *SendMsgToGroupReq) GetMessage() (v *base.Message) {
	if !p.IsSetMessage() {
		return SendMsgToGroupReq_Message_DEFAULT
	}
	return p.Message
}
func (p *SendMsgToGroupReq) SetLinkIds(val []string) {
	p.LinkIds = val
}
func (p *SendMsgToGroupReq) SetMessage(val *base.Message) {
	p.Message = val
}

var fieldIDToName_SendMsgToGroupReq = map[int16]string{
	1: "link_ids",
	2: "message",
}

func (p *SendMsgToGroupReq) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SendMsgToGroupReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SendMsgToGroupReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SendMsgToGroupReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.LinkIds = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.LinkIds = append(p.LinkIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *SendMsgToGroupReq) ReadField2(iprot thrift.TProtocol) error {
	p.Message = base.NewMessage()
	if err := p.Message.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SendMsgToGroupReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToGroupReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SendMsgToGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("link_ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.LinkIds)); err != nil {
		return err
	}
	for _, v := range p.LinkIds {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SendMsgToGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Message.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SendMsgToGroupReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMsgToGroupReq(%+v)", *p)

}

func (p *SendMsgToGroupReq) DeepEqual(ano *SendMsgToGroupReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LinkIds) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *SendMsgToGroupReq) Field1DeepEqual(src []string) bool {

	if len(p.LinkIds) != len(src) {
		return false
	}
	for i, v := range p.LinkIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SendMsgToGroupReq) Field2DeepEqual(src *base.Message) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}

type SendMsgToGroupRes struct {
	LinkIds []string `thrift:"link_ids,1" frugal:"1,default,list<string>" json:"link_ids"`
}

func NewSendMsgToGroupRes() *SendMsgToGroupRes {
	return &SendMsgToGroupRes{}
}

func (p *SendMsgToGroupRes) InitDefault() {
	*p = SendMsgToGroupRes{}
}

func (p *SendMsgToGroupRes) GetLinkIds() (v []string) {
	return p.LinkIds
}
func (p *SendMsgToGroupRes) SetLinkIds(val []string) {
	p.LinkIds = val
}

var fieldIDToName_SendMsgToGroupRes = map[int16]string{
	1: "link_ids",
}

func (p *SendMsgToGroupRes) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SendMsgToGroupRes[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SendMsgToGroupRes) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.LinkIds = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.LinkIds = append(p.LinkIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SendMsgToGroupRes) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToGroupRes"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SendMsgToGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("link_ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.LinkIds)); err != nil {
		return err
	}
	for _, v := range p.LinkIds {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SendMsgToGroupRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMsgToGroupRes(%+v)", *p)

}

func (p *SendMsgToGroupRes) DeepEqual(ano *SendMsgToGroupRes) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LinkIds) {
		return false
	}
	return true
}

func (p *SendMsgToGroupRes) Field1DeepEqual(src []string) bool {

	if len(p.LinkIds) != len(src) {
		return false
	}
	for i, v := range p.LinkIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type MessageRes struct {
	Success bool          `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Message *base.Message `thrift:"message,2" frugal:"2,default,base.Message" json:"message"`
}

func NewMessageRes() *MessageRes {
	return &MessageRes{}
}

func (p *MessageRes) InitDefault() {
	*p = MessageRes{}
}

func (p *MessageRes) GetSuccess() (v bool) {
	return p.Success
}

var MessageRes_Message_DEFAULT *base.Message

func (p *MessageRes) GetMessage() (v *base.Message) {
	if !p.IsSetMessage() {
		return MessageRes_Message_DEFAULT
	}
	return p.Message
}
func (p *MessageRes) SetSuccess(val bool) {
	p.Success = val
}
func (p *MessageRes) SetMessage(val *base.Message) {
	p.Message = val
}

var fieldIDToName_MessageRes = map[int16]string{
	1: "success",
	2: "message",
}

func (p *MessageRes) IsSetMessage() bool {
	return p.Message != nil
}

func (p *MessageRes) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MessageRes[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MessageRes) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Success = v
	}
	return nil
}
func (p *MessageRes) ReadField2(iprot thrift.TProtocol) error {
	p.Message = base.NewMessage()
	if err := p.Message.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MessageRes) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MessageRes"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MessageRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MessageRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Message.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MessageRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageRes(%+v)", *p)

}

func (p *MessageRes) DeepEqual(ano *MessageRes) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *MessageRes) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *MessageRes) Field2DeepEqual(src *base.Message) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}

type ImHandler interface {
	MetaMessage(ctx context.Context, metaMsg *base.MetaMsg) (r *MessageRes, err error)

	HandlerPrivateMessage(ctx context.Context, message *base.Message) (r *MessageRes, err error)

	HandlerGroupMessage(ctx context.Context, message *base.Message) (r *MessageRes, err error)
}

type ImHandlerClient struct {
	c thrift.TClient
}

func NewImHandlerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ImHandlerClient {
	return &ImHandlerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewImHandlerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ImHandlerClient {
	return &ImHandlerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewImHandlerClient(c thrift.TClient) *ImHandlerClient {
	return &ImHandlerClient{
		c: c,
	}
}

func (p *ImHandlerClient) Client_() thrift.TClient {
	return p.c
}

func (p *ImHandlerClient) MetaMessage(ctx context.Context, metaMsg *base.MetaMsg) (r *MessageRes, err error) {
	var _args ImHandlerMetaMessageArgs
	_args.MetaMsg = metaMsg
	var _result ImHandlerMetaMessageResult
	if err = p.Client_().Call(ctx, "MetaMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ImHandlerClient) HandlerPrivateMessage(ctx context.Context, message *base.Message) (r *MessageRes, err error) {
	var _args ImHandlerHandlerPrivateMessageArgs
	_args.Message = message
	var _result ImHandlerHandlerPrivateMessageResult
	if err = p.Client_().Call(ctx, "HandlerPrivateMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ImHandlerClient) HandlerGroupMessage(ctx context.Context, message *base.Message) (r *MessageRes, err error) {
	var _args ImHandlerHandlerGroupMessageArgs
	_args.Message = message
	var _result ImHandlerHandlerGroupMessageResult
	if err = p.Client_().Call(ctx, "HandlerGroupMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ImServer interface {
	SendMsgToOne(ctx context.Context, sendMsgToOneReq *SendMsgToOneReq) (r *MessageRes, err error)

	SendMsgToGroup(ctx context.Context, sendMsgToGroupReq *SendMsgToGroupReq) (r *SendMsgToGroupRes, err error)

	SendMsgToAll(ctx context.Context, message *base.Message) (r *MessageRes, err error)
}

type ImServerClient struct {
	c thrift.TClient
}

func NewImServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ImServerClient {
	return &ImServerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewImServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ImServerClient {
	return &ImServerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewImServerClient(c thrift.TClient) *ImServerClient {
	return &ImServerClient{
		c: c,
	}
}

func (p *ImServerClient) Client_() thrift.TClient {
	return p.c
}

func (p *ImServerClient) SendMsgToOne(ctx context.Context, sendMsgToOneReq *SendMsgToOneReq) (r *MessageRes, err error) {
	var _args ImServerSendMsgToOneArgs
	_args.SendMsgToOneReq = sendMsgToOneReq
	var _result ImServerSendMsgToOneResult
	if err = p.Client_().Call(ctx, "SendMsgToOne", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ImServerClient) SendMsgToGroup(ctx context.Context, sendMsgToGroupReq *SendMsgToGroupReq) (r *SendMsgToGroupRes, err error) {
	var _args ImServerSendMsgToGroupArgs
	_args.SendMsgToGroupReq = sendMsgToGroupReq
	var _result ImServerSendMsgToGroupResult
	if err = p.Client_().Call(ctx, "SendMsgToGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ImServerClient) SendMsgToAll(ctx context.Context, message *base.Message) (r *MessageRes, err error) {
	var _args ImServerSendMsgToAllArgs
	_args.Message = message
	var _result ImServerSendMsgToAllResult
	if err = p.Client_().Call(ctx, "SendMsgToAll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ImHandlerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ImHandler
}

func (p *ImHandlerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ImHandlerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ImHandlerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewImHandlerProcessor(handler ImHandler) *ImHandlerProcessor {
	self := &ImHandlerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("MetaMessage", &imHandlerProcessorMetaMessage{handler: handler})
	self.AddToProcessorMap("HandlerPrivateMessage", &imHandlerProcessorHandlerPrivateMessage{handler: handler})
	self.AddToProcessorMap("HandlerGroupMessage", &imHandlerProcessorHandlerGroupMessage{handler: handler})
	return self
}
func (p *ImHandlerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type imHandlerProcessorMetaMessage struct {
	handler ImHandler
}

func (p *imHandlerProcessorMetaMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ImHandlerMetaMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MetaMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ImHandlerMetaMessageResult{}
	var retval *MessageRes
	if retval, err2 = p.handler.MetaMessage(ctx, args.MetaMsg); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MetaMessage: "+err2.Error())
		oprot.WriteMessageBegin("MetaMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MetaMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type imHandlerProcessorHandlerPrivateMessage struct {
	handler ImHandler
}

func (p *imHandlerProcessorHandlerPrivateMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ImHandlerHandlerPrivateMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HandlerPrivateMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ImHandlerHandlerPrivateMessageResult{}
	var retval *MessageRes
	if retval, err2 = p.handler.HandlerPrivateMessage(ctx, args.Message); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HandlerPrivateMessage: "+err2.Error())
		oprot.WriteMessageBegin("HandlerPrivateMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HandlerPrivateMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type imHandlerProcessorHandlerGroupMessage struct {
	handler ImHandler
}

func (p *imHandlerProcessorHandlerGroupMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ImHandlerHandlerGroupMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HandlerGroupMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ImHandlerHandlerGroupMessageResult{}
	var retval *MessageRes
	if retval, err2 = p.handler.HandlerGroupMessage(ctx, args.Message); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HandlerGroupMessage: "+err2.Error())
		oprot.WriteMessageBegin("HandlerGroupMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HandlerGroupMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ImHandlerMetaMessageArgs struct {
	MetaMsg *base.MetaMsg `thrift:"metaMsg,1" frugal:"1,default,base.MetaMsg" json:"metaMsg"`
}

func NewImHandlerMetaMessageArgs() *ImHandlerMetaMessageArgs {
	return &ImHandlerMetaMessageArgs{}
}

func (p *ImHandlerMetaMessageArgs) InitDefault() {
	*p = ImHandlerMetaMessageArgs{}
}

var ImHandlerMetaMessageArgs_MetaMsg_DEFAULT *base.MetaMsg

func (p *ImHandlerMetaMessageArgs) GetMetaMsg() (v *base.MetaMsg) {
	if !p.IsSetMetaMsg() {
		return ImHandlerMetaMessageArgs_MetaMsg_DEFAULT
	}
	return p.MetaMsg
}
func (p *ImHandlerMetaMessageArgs) SetMetaMsg(val *base.MetaMsg) {
	p.MetaMsg = val
}

var fieldIDToName_ImHandlerMetaMessageArgs = map[int16]string{
	1: "metaMsg",
}

func (p *ImHandlerMetaMessageArgs) IsSetMetaMsg() bool {
	return p.MetaMsg != nil
}

func (p *ImHandlerMetaMessageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImHandlerMetaMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImHandlerMetaMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.MetaMsg = base.NewMetaMsg()
	if err := p.MetaMsg.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImHandlerMetaMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MetaMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImHandlerMetaMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("metaMsg", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.MetaMsg.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImHandlerMetaMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImHandlerMetaMessageArgs(%+v)", *p)

}

func (p *ImHandlerMetaMessageArgs) DeepEqual(ano *ImHandlerMetaMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MetaMsg) {
		return false
	}
	return true
}

func (p *ImHandlerMetaMessageArgs) Field1DeepEqual(src *base.MetaMsg) bool {

	if !p.MetaMsg.DeepEqual(src) {
		return false
	}
	return true
}

type ImHandlerMetaMessageResult struct {
	Success *MessageRes `thrift:"success,0,optional" frugal:"0,optional,MessageRes" json:"success,omitempty"`
}

func NewImHandlerMetaMessageResult() *ImHandlerMetaMessageResult {
	return &ImHandlerMetaMessageResult{}
}

func (p *ImHandlerMetaMessageResult) InitDefault() {
	*p = ImHandlerMetaMessageResult{}
}

var ImHandlerMetaMessageResult_Success_DEFAULT *MessageRes

func (p *ImHandlerMetaMessageResult) GetSuccess() (v *MessageRes) {
	if !p.IsSetSuccess() {
		return ImHandlerMetaMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ImHandlerMetaMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*MessageRes)
}

var fieldIDToName_ImHandlerMetaMessageResult = map[int16]string{
	0: "success",
}

func (p *ImHandlerMetaMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ImHandlerMetaMessageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImHandlerMetaMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImHandlerMetaMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMessageRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImHandlerMetaMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MetaMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImHandlerMetaMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ImHandlerMetaMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImHandlerMetaMessageResult(%+v)", *p)

}

func (p *ImHandlerMetaMessageResult) DeepEqual(ano *ImHandlerMetaMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ImHandlerMetaMessageResult) Field0DeepEqual(src *MessageRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ImHandlerHandlerPrivateMessageArgs struct {
	Message *base.Message `thrift:"message,1" frugal:"1,default,base.Message" json:"message"`
}

func NewImHandlerHandlerPrivateMessageArgs() *ImHandlerHandlerPrivateMessageArgs {
	return &ImHandlerHandlerPrivateMessageArgs{}
}

func (p *ImHandlerHandlerPrivateMessageArgs) InitDefault() {
	*p = ImHandlerHandlerPrivateMessageArgs{}
}

var ImHandlerHandlerPrivateMessageArgs_Message_DEFAULT *base.Message

func (p *ImHandlerHandlerPrivateMessageArgs) GetMessage() (v *base.Message) {
	if !p.IsSetMessage() {
		return ImHandlerHandlerPrivateMessageArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *ImHandlerHandlerPrivateMessageArgs) SetMessage(val *base.Message) {
	p.Message = val
}

var fieldIDToName_ImHandlerHandlerPrivateMessageArgs = map[int16]string{
	1: "message",
}

func (p *ImHandlerHandlerPrivateMessageArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ImHandlerHandlerPrivateMessageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImHandlerHandlerPrivateMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImHandlerHandlerPrivateMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Message = base.NewMessage()
	if err := p.Message.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImHandlerHandlerPrivateMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HandlerPrivateMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImHandlerHandlerPrivateMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Message.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImHandlerHandlerPrivateMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImHandlerHandlerPrivateMessageArgs(%+v)", *p)

}

func (p *ImHandlerHandlerPrivateMessageArgs) DeepEqual(ano *ImHandlerHandlerPrivateMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *ImHandlerHandlerPrivateMessageArgs) Field1DeepEqual(src *base.Message) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}

type ImHandlerHandlerPrivateMessageResult struct {
	Success *MessageRes `thrift:"success,0,optional" frugal:"0,optional,MessageRes" json:"success,omitempty"`
}

func NewImHandlerHandlerPrivateMessageResult() *ImHandlerHandlerPrivateMessageResult {
	return &ImHandlerHandlerPrivateMessageResult{}
}

func (p *ImHandlerHandlerPrivateMessageResult) InitDefault() {
	*p = ImHandlerHandlerPrivateMessageResult{}
}

var ImHandlerHandlerPrivateMessageResult_Success_DEFAULT *MessageRes

func (p *ImHandlerHandlerPrivateMessageResult) GetSuccess() (v *MessageRes) {
	if !p.IsSetSuccess() {
		return ImHandlerHandlerPrivateMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ImHandlerHandlerPrivateMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*MessageRes)
}

var fieldIDToName_ImHandlerHandlerPrivateMessageResult = map[int16]string{
	0: "success",
}

func (p *ImHandlerHandlerPrivateMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ImHandlerHandlerPrivateMessageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImHandlerHandlerPrivateMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImHandlerHandlerPrivateMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMessageRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImHandlerHandlerPrivateMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HandlerPrivateMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImHandlerHandlerPrivateMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ImHandlerHandlerPrivateMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImHandlerHandlerPrivateMessageResult(%+v)", *p)

}

func (p *ImHandlerHandlerPrivateMessageResult) DeepEqual(ano *ImHandlerHandlerPrivateMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ImHandlerHandlerPrivateMessageResult) Field0DeepEqual(src *MessageRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ImHandlerHandlerGroupMessageArgs struct {
	Message *base.Message `thrift:"message,1" frugal:"1,default,base.Message" json:"message"`
}

func NewImHandlerHandlerGroupMessageArgs() *ImHandlerHandlerGroupMessageArgs {
	return &ImHandlerHandlerGroupMessageArgs{}
}

func (p *ImHandlerHandlerGroupMessageArgs) InitDefault() {
	*p = ImHandlerHandlerGroupMessageArgs{}
}

var ImHandlerHandlerGroupMessageArgs_Message_DEFAULT *base.Message

func (p *ImHandlerHandlerGroupMessageArgs) GetMessage() (v *base.Message) {
	if !p.IsSetMessage() {
		return ImHandlerHandlerGroupMessageArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *ImHandlerHandlerGroupMessageArgs) SetMessage(val *base.Message) {
	p.Message = val
}

var fieldIDToName_ImHandlerHandlerGroupMessageArgs = map[int16]string{
	1: "message",
}

func (p *ImHandlerHandlerGroupMessageArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ImHandlerHandlerGroupMessageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImHandlerHandlerGroupMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImHandlerHandlerGroupMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Message = base.NewMessage()
	if err := p.Message.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImHandlerHandlerGroupMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HandlerGroupMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImHandlerHandlerGroupMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Message.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImHandlerHandlerGroupMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImHandlerHandlerGroupMessageArgs(%+v)", *p)

}

func (p *ImHandlerHandlerGroupMessageArgs) DeepEqual(ano *ImHandlerHandlerGroupMessageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *ImHandlerHandlerGroupMessageArgs) Field1DeepEqual(src *base.Message) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}

type ImHandlerHandlerGroupMessageResult struct {
	Success *MessageRes `thrift:"success,0,optional" frugal:"0,optional,MessageRes" json:"success,omitempty"`
}

func NewImHandlerHandlerGroupMessageResult() *ImHandlerHandlerGroupMessageResult {
	return &ImHandlerHandlerGroupMessageResult{}
}

func (p *ImHandlerHandlerGroupMessageResult) InitDefault() {
	*p = ImHandlerHandlerGroupMessageResult{}
}

var ImHandlerHandlerGroupMessageResult_Success_DEFAULT *MessageRes

func (p *ImHandlerHandlerGroupMessageResult) GetSuccess() (v *MessageRes) {
	if !p.IsSetSuccess() {
		return ImHandlerHandlerGroupMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ImHandlerHandlerGroupMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*MessageRes)
}

var fieldIDToName_ImHandlerHandlerGroupMessageResult = map[int16]string{
	0: "success",
}

func (p *ImHandlerHandlerGroupMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ImHandlerHandlerGroupMessageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImHandlerHandlerGroupMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImHandlerHandlerGroupMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMessageRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImHandlerHandlerGroupMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HandlerGroupMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImHandlerHandlerGroupMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ImHandlerHandlerGroupMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImHandlerHandlerGroupMessageResult(%+v)", *p)

}

func (p *ImHandlerHandlerGroupMessageResult) DeepEqual(ano *ImHandlerHandlerGroupMessageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ImHandlerHandlerGroupMessageResult) Field0DeepEqual(src *MessageRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ImServerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ImServer
}

func (p *ImServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ImServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ImServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewImServerProcessor(handler ImServer) *ImServerProcessor {
	self := &ImServerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("SendMsgToOne", &imServerProcessorSendMsgToOne{handler: handler})
	self.AddToProcessorMap("SendMsgToGroup", &imServerProcessorSendMsgToGroup{handler: handler})
	self.AddToProcessorMap("SendMsgToAll", &imServerProcessorSendMsgToAll{handler: handler})
	return self
}
func (p *ImServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type imServerProcessorSendMsgToOne struct {
	handler ImServer
}

func (p *imServerProcessorSendMsgToOne) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ImServerSendMsgToOneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendMsgToOne", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ImServerSendMsgToOneResult{}
	var retval *MessageRes
	if retval, err2 = p.handler.SendMsgToOne(ctx, args.SendMsgToOneReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendMsgToOne: "+err2.Error())
		oprot.WriteMessageBegin("SendMsgToOne", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendMsgToOne", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type imServerProcessorSendMsgToGroup struct {
	handler ImServer
}

func (p *imServerProcessorSendMsgToGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ImServerSendMsgToGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendMsgToGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ImServerSendMsgToGroupResult{}
	var retval *SendMsgToGroupRes
	if retval, err2 = p.handler.SendMsgToGroup(ctx, args.SendMsgToGroupReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendMsgToGroup: "+err2.Error())
		oprot.WriteMessageBegin("SendMsgToGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendMsgToGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type imServerProcessorSendMsgToAll struct {
	handler ImServer
}

func (p *imServerProcessorSendMsgToAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ImServerSendMsgToAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendMsgToAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ImServerSendMsgToAllResult{}
	var retval *MessageRes
	if retval, err2 = p.handler.SendMsgToAll(ctx, args.Message); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendMsgToAll: "+err2.Error())
		oprot.WriteMessageBegin("SendMsgToAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendMsgToAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ImServerSendMsgToOneArgs struct {
	SendMsgToOneReq *SendMsgToOneReq `thrift:"sendMsgToOneReq,1" frugal:"1,default,SendMsgToOneReq" json:"sendMsgToOneReq"`
}

func NewImServerSendMsgToOneArgs() *ImServerSendMsgToOneArgs {
	return &ImServerSendMsgToOneArgs{}
}

func (p *ImServerSendMsgToOneArgs) InitDefault() {
	*p = ImServerSendMsgToOneArgs{}
}

var ImServerSendMsgToOneArgs_SendMsgToOneReq_DEFAULT *SendMsgToOneReq

func (p *ImServerSendMsgToOneArgs) GetSendMsgToOneReq() (v *SendMsgToOneReq) {
	if !p.IsSetSendMsgToOneReq() {
		return ImServerSendMsgToOneArgs_SendMsgToOneReq_DEFAULT
	}
	return p.SendMsgToOneReq
}
func (p *ImServerSendMsgToOneArgs) SetSendMsgToOneReq(val *SendMsgToOneReq) {
	p.SendMsgToOneReq = val
}

var fieldIDToName_ImServerSendMsgToOneArgs = map[int16]string{
	1: "sendMsgToOneReq",
}

func (p *ImServerSendMsgToOneArgs) IsSetSendMsgToOneReq() bool {
	return p.SendMsgToOneReq != nil
}

func (p *ImServerSendMsgToOneArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImServerSendMsgToOneArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImServerSendMsgToOneArgs) ReadField1(iprot thrift.TProtocol) error {
	p.SendMsgToOneReq = NewSendMsgToOneReq()
	if err := p.SendMsgToOneReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImServerSendMsgToOneArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToOne_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImServerSendMsgToOneArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sendMsgToOneReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SendMsgToOneReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImServerSendMsgToOneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImServerSendMsgToOneArgs(%+v)", *p)

}

func (p *ImServerSendMsgToOneArgs) DeepEqual(ano *ImServerSendMsgToOneArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SendMsgToOneReq) {
		return false
	}
	return true
}

func (p *ImServerSendMsgToOneArgs) Field1DeepEqual(src *SendMsgToOneReq) bool {

	if !p.SendMsgToOneReq.DeepEqual(src) {
		return false
	}
	return true
}

type ImServerSendMsgToOneResult struct {
	Success *MessageRes `thrift:"success,0,optional" frugal:"0,optional,MessageRes" json:"success,omitempty"`
}

func NewImServerSendMsgToOneResult() *ImServerSendMsgToOneResult {
	return &ImServerSendMsgToOneResult{}
}

func (p *ImServerSendMsgToOneResult) InitDefault() {
	*p = ImServerSendMsgToOneResult{}
}

var ImServerSendMsgToOneResult_Success_DEFAULT *MessageRes

func (p *ImServerSendMsgToOneResult) GetSuccess() (v *MessageRes) {
	if !p.IsSetSuccess() {
		return ImServerSendMsgToOneResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ImServerSendMsgToOneResult) SetSuccess(x interface{}) {
	p.Success = x.(*MessageRes)
}

var fieldIDToName_ImServerSendMsgToOneResult = map[int16]string{
	0: "success",
}

func (p *ImServerSendMsgToOneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ImServerSendMsgToOneResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImServerSendMsgToOneResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImServerSendMsgToOneResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMessageRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImServerSendMsgToOneResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToOne_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImServerSendMsgToOneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ImServerSendMsgToOneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImServerSendMsgToOneResult(%+v)", *p)

}

func (p *ImServerSendMsgToOneResult) DeepEqual(ano *ImServerSendMsgToOneResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ImServerSendMsgToOneResult) Field0DeepEqual(src *MessageRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ImServerSendMsgToGroupArgs struct {
	SendMsgToGroupReq *SendMsgToGroupReq `thrift:"sendMsgToGroupReq,1" frugal:"1,default,SendMsgToGroupReq" json:"sendMsgToGroupReq"`
}

func NewImServerSendMsgToGroupArgs() *ImServerSendMsgToGroupArgs {
	return &ImServerSendMsgToGroupArgs{}
}

func (p *ImServerSendMsgToGroupArgs) InitDefault() {
	*p = ImServerSendMsgToGroupArgs{}
}

var ImServerSendMsgToGroupArgs_SendMsgToGroupReq_DEFAULT *SendMsgToGroupReq

func (p *ImServerSendMsgToGroupArgs) GetSendMsgToGroupReq() (v *SendMsgToGroupReq) {
	if !p.IsSetSendMsgToGroupReq() {
		return ImServerSendMsgToGroupArgs_SendMsgToGroupReq_DEFAULT
	}
	return p.SendMsgToGroupReq
}
func (p *ImServerSendMsgToGroupArgs) SetSendMsgToGroupReq(val *SendMsgToGroupReq) {
	p.SendMsgToGroupReq = val
}

var fieldIDToName_ImServerSendMsgToGroupArgs = map[int16]string{
	1: "sendMsgToGroupReq",
}

func (p *ImServerSendMsgToGroupArgs) IsSetSendMsgToGroupReq() bool {
	return p.SendMsgToGroupReq != nil
}

func (p *ImServerSendMsgToGroupArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImServerSendMsgToGroupArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImServerSendMsgToGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	p.SendMsgToGroupReq = NewSendMsgToGroupReq()
	if err := p.SendMsgToGroupReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImServerSendMsgToGroupArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToGroup_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImServerSendMsgToGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sendMsgToGroupReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SendMsgToGroupReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImServerSendMsgToGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImServerSendMsgToGroupArgs(%+v)", *p)

}

func (p *ImServerSendMsgToGroupArgs) DeepEqual(ano *ImServerSendMsgToGroupArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SendMsgToGroupReq) {
		return false
	}
	return true
}

func (p *ImServerSendMsgToGroupArgs) Field1DeepEqual(src *SendMsgToGroupReq) bool {

	if !p.SendMsgToGroupReq.DeepEqual(src) {
		return false
	}
	return true
}

type ImServerSendMsgToGroupResult struct {
	Success *SendMsgToGroupRes `thrift:"success,0,optional" frugal:"0,optional,SendMsgToGroupRes" json:"success,omitempty"`
}

func NewImServerSendMsgToGroupResult() *ImServerSendMsgToGroupResult {
	return &ImServerSendMsgToGroupResult{}
}

func (p *ImServerSendMsgToGroupResult) InitDefault() {
	*p = ImServerSendMsgToGroupResult{}
}

var ImServerSendMsgToGroupResult_Success_DEFAULT *SendMsgToGroupRes

func (p *ImServerSendMsgToGroupResult) GetSuccess() (v *SendMsgToGroupRes) {
	if !p.IsSetSuccess() {
		return ImServerSendMsgToGroupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ImServerSendMsgToGroupResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendMsgToGroupRes)
}

var fieldIDToName_ImServerSendMsgToGroupResult = map[int16]string{
	0: "success",
}

func (p *ImServerSendMsgToGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ImServerSendMsgToGroupResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImServerSendMsgToGroupResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImServerSendMsgToGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSendMsgToGroupRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImServerSendMsgToGroupResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToGroup_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImServerSendMsgToGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ImServerSendMsgToGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImServerSendMsgToGroupResult(%+v)", *p)

}

func (p *ImServerSendMsgToGroupResult) DeepEqual(ano *ImServerSendMsgToGroupResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ImServerSendMsgToGroupResult) Field0DeepEqual(src *SendMsgToGroupRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ImServerSendMsgToAllArgs struct {
	Message *base.Message `thrift:"message,1" frugal:"1,default,base.Message" json:"message"`
}

func NewImServerSendMsgToAllArgs() *ImServerSendMsgToAllArgs {
	return &ImServerSendMsgToAllArgs{}
}

func (p *ImServerSendMsgToAllArgs) InitDefault() {
	*p = ImServerSendMsgToAllArgs{}
}

var ImServerSendMsgToAllArgs_Message_DEFAULT *base.Message

func (p *ImServerSendMsgToAllArgs) GetMessage() (v *base.Message) {
	if !p.IsSetMessage() {
		return ImServerSendMsgToAllArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *ImServerSendMsgToAllArgs) SetMessage(val *base.Message) {
	p.Message = val
}

var fieldIDToName_ImServerSendMsgToAllArgs = map[int16]string{
	1: "message",
}

func (p *ImServerSendMsgToAllArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ImServerSendMsgToAllArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImServerSendMsgToAllArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImServerSendMsgToAllArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Message = base.NewMessage()
	if err := p.Message.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImServerSendMsgToAllArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToAll_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImServerSendMsgToAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Message.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImServerSendMsgToAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImServerSendMsgToAllArgs(%+v)", *p)

}

func (p *ImServerSendMsgToAllArgs) DeepEqual(ano *ImServerSendMsgToAllArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *ImServerSendMsgToAllArgs) Field1DeepEqual(src *base.Message) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}

type ImServerSendMsgToAllResult struct {
	Success *MessageRes `thrift:"success,0,optional" frugal:"0,optional,MessageRes" json:"success,omitempty"`
}

func NewImServerSendMsgToAllResult() *ImServerSendMsgToAllResult {
	return &ImServerSendMsgToAllResult{}
}

func (p *ImServerSendMsgToAllResult) InitDefault() {
	*p = ImServerSendMsgToAllResult{}
}

var ImServerSendMsgToAllResult_Success_DEFAULT *MessageRes

func (p *ImServerSendMsgToAllResult) GetSuccess() (v *MessageRes) {
	if !p.IsSetSuccess() {
		return ImServerSendMsgToAllResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ImServerSendMsgToAllResult) SetSuccess(x interface{}) {
	p.Success = x.(*MessageRes)
}

var fieldIDToName_ImServerSendMsgToAllResult = map[int16]string{
	0: "success",
}

func (p *ImServerSendMsgToAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ImServerSendMsgToAllResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImServerSendMsgToAllResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImServerSendMsgToAllResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMessageRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ImServerSendMsgToAllResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendMsgToAll_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImServerSendMsgToAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ImServerSendMsgToAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImServerSendMsgToAllResult(%+v)", *p)

}

func (p *ImServerSendMsgToAllResult) DeepEqual(ano *ImServerSendMsgToAllResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ImServerSendMsgToAllResult) Field0DeepEqual(src *MessageRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
