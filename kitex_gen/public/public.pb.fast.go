// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package public

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *LoginByPasswordReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginByPasswordReq[number], err)
}

func (x *LoginByPasswordReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginByPasswordReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginByPasswordReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SessionId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginByEmailReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginByEmailReq[number], err)
}

func (x *LoginByEmailReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginByEmailReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Captcha, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginByEmailReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SessionId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginRes[number], err)
}

func (x *LoginRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Expire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserInfoReq[number], err)
}

func (x *UserInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserInfoRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserInfoRes[number], err)
}

func (x *UserInfoRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserInfoRes) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserInfoRes) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Roles = append(x.Roles, v)
	return offset, err
}

func (x *LoginByPasswordReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *LoginByPasswordReq) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *LoginByPasswordReq) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *LoginByPasswordReq) fastWriteField3(buf []byte) (offset int) {
	if x.SessionId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSessionId())
	return offset
}

func (x *LoginByEmailReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *LoginByEmailReq) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *LoginByEmailReq) fastWriteField2(buf []byte) (offset int) {
	if x.Captcha == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCaptcha())
	return offset
}

func (x *LoginByEmailReq) fastWriteField3(buf []byte) (offset int) {
	if x.SessionId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSessionId())
	return offset
}

func (x *LoginRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LoginRes) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *LoginRes) fastWriteField2(buf []byte) (offset int) {
	if x.Expire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetExpire())
	return offset
}

func (x *UserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UserInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *UserInfoRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UserInfoRes) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *UserInfoRes) fastWriteField2(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAvatar())
	return offset
}

func (x *UserInfoRes) fastWriteField3(buf []byte) (offset int) {
	if len(x.Roles) == 0 {
		return offset
	}
	for i := range x.GetRoles() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetRoles()[i])
	}
	return offset
}

func (x *LoginByPasswordReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *LoginByPasswordReq) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *LoginByPasswordReq) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *LoginByPasswordReq) sizeField3() (n int) {
	if x.SessionId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSessionId())
	return n
}

func (x *LoginByEmailReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *LoginByEmailReq) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *LoginByEmailReq) sizeField2() (n int) {
	if x.Captcha == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCaptcha())
	return n
}

func (x *LoginByEmailReq) sizeField3() (n int) {
	if x.SessionId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSessionId())
	return n
}

func (x *LoginRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LoginRes) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *LoginRes) sizeField2() (n int) {
	if x.Expire == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetExpire())
	return n
}

func (x *UserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UserInfoReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserId())
	return n
}

func (x *UserInfoRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UserInfoRes) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *UserInfoRes) sizeField2() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAvatar())
	return n
}

func (x *UserInfoRes) sizeField3() (n int) {
	if len(x.Roles) == 0 {
		return n
	}
	for i := range x.GetRoles() {
		n += fastpb.SizeString(3, x.GetRoles()[i])
	}
	return n
}

var fieldIDToName_LoginByPasswordReq = map[int32]string{
	1: "Username",
	2: "Password",
	3: "SessionId",
}

var fieldIDToName_LoginByEmailReq = map[int32]string{
	1: "Email",
	2: "Captcha",
	3: "SessionId",
}

var fieldIDToName_LoginRes = map[int32]string{
	1: "Token",
	2: "Expire",
}

var fieldIDToName_UserInfoReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_UserInfoRes = map[int32]string{
	1: "Username",
	2: "Avatar",
	3: "Roles",
}
