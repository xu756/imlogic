// Code generated by Kitex v0.7.3. DO NOT EDIT.

package publicsrv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	public "github.com/xu756/imlogic/kitex_gen/public"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return publicSrvServiceInfo
}

var publicSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublicSrv"
	handlerType := (*public.PublicSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"LoginByPassword": kitex.NewMethodInfo(loginByPasswordHandler, newLoginByPasswordArgs, newLoginByPasswordResult, false),
		"LoginByEmail":    kitex.NewMethodInfo(loginByEmailHandler, newLoginByEmailArgs, newLoginByEmailResult, false),
		"GetUserInfo":     kitex.NewMethodInfo(getUserInfoHandler, newGetUserInfoArgs, newGetUserInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "public",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func loginByPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(public.LoginByPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(public.PublicSrv).LoginByPassword(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginByPasswordArgs:
		success, err := handler.(public.PublicSrv).LoginByPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginByPasswordResult)
		realResult.Success = success
	}
	return nil
}
func newLoginByPasswordArgs() interface{} {
	return &LoginByPasswordArgs{}
}

func newLoginByPasswordResult() interface{} {
	return &LoginByPasswordResult{}
}

type LoginByPasswordArgs struct {
	Req *public.LoginByPasswordReq
}

func (p *LoginByPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(public.LoginByPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginByPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginByPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginByPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginByPasswordArgs) Unmarshal(in []byte) error {
	msg := new(public.LoginByPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginByPasswordArgs_Req_DEFAULT *public.LoginByPasswordReq

func (p *LoginByPasswordArgs) GetReq() *public.LoginByPasswordReq {
	if !p.IsSetReq() {
		return LoginByPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginByPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginByPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginByPasswordResult struct {
	Success *public.LoginRes
}

var LoginByPasswordResult_Success_DEFAULT *public.LoginRes

func (p *LoginByPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(public.LoginRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginByPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginByPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginByPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginByPasswordResult) Unmarshal(in []byte) error {
	msg := new(public.LoginRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginByPasswordResult) GetSuccess() *public.LoginRes {
	if !p.IsSetSuccess() {
		return LoginByPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginByPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*public.LoginRes)
}

func (p *LoginByPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginByPasswordResult) GetResult() interface{} {
	return p.Success
}

func loginByEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(public.LoginByEmailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(public.PublicSrv).LoginByEmail(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginByEmailArgs:
		success, err := handler.(public.PublicSrv).LoginByEmail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginByEmailResult)
		realResult.Success = success
	}
	return nil
}
func newLoginByEmailArgs() interface{} {
	return &LoginByEmailArgs{}
}

func newLoginByEmailResult() interface{} {
	return &LoginByEmailResult{}
}

type LoginByEmailArgs struct {
	Req *public.LoginByEmailReq
}

func (p *LoginByEmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(public.LoginByEmailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginByEmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginByEmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginByEmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginByEmailArgs) Unmarshal(in []byte) error {
	msg := new(public.LoginByEmailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginByEmailArgs_Req_DEFAULT *public.LoginByEmailReq

func (p *LoginByEmailArgs) GetReq() *public.LoginByEmailReq {
	if !p.IsSetReq() {
		return LoginByEmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginByEmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginByEmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginByEmailResult struct {
	Success *public.LoginRes
}

var LoginByEmailResult_Success_DEFAULT *public.LoginRes

func (p *LoginByEmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(public.LoginRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginByEmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginByEmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginByEmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginByEmailResult) Unmarshal(in []byte) error {
	msg := new(public.LoginRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginByEmailResult) GetSuccess() *public.LoginRes {
	if !p.IsSetSuccess() {
		return LoginByEmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginByEmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*public.LoginRes)
}

func (p *LoginByEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginByEmailResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(public.UserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(public.PublicSrv).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserInfoArgs:
		success, err := handler.(public.PublicSrv).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *public.UserInfoReq
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(public.UserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(public.UserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *public.UserInfoReq

func (p *GetUserInfoArgs) GetReq() *public.UserInfoReq {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *public.UserInfoRes
}

var GetUserInfoResult_Success_DEFAULT *public.UserInfoRes

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(public.UserInfoRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(public.UserInfoRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *public.UserInfoRes {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*public.UserInfoRes)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LoginByPassword(ctx context.Context, Req *public.LoginByPasswordReq) (r *public.LoginRes, err error) {
	var _args LoginByPasswordArgs
	_args.Req = Req
	var _result LoginByPasswordResult
	if err = p.c.Call(ctx, "LoginByPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginByEmail(ctx context.Context, Req *public.LoginByEmailReq) (r *public.LoginRes, err error) {
	var _args LoginByEmailArgs
	_args.Req = Req
	var _result LoginByEmailResult
	if err = p.c.Call(ctx, "LoginByEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *public.UserInfoReq) (r *public.UserInfoRes, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
