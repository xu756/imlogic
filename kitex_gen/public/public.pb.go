// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.2
// source: idl/public.proto

package public

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginByPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Device    string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *LoginByPasswordReq) Reset() {
	*x = LoginByPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_public_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginByPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginByPasswordReq) ProtoMessage() {}

func (x *LoginByPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_public_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginByPasswordReq.ProtoReflect.Descriptor instead.
func (*LoginByPasswordReq) Descriptor() ([]byte, []int) {
	return file_idl_public_proto_rawDescGZIP(), []int{0}
}

func (x *LoginByPasswordReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginByPasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginByPasswordReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LoginByPasswordReq) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

type LoginByMobileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile    string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Captcha   string `protobuf:"bytes,2,opt,name=captcha,proto3" json:"captcha,omitempty"`
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Device    string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *LoginByMobileReq) Reset() {
	*x = LoginByMobileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_public_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginByMobileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginByMobileReq) ProtoMessage() {}

func (x *LoginByMobileReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_public_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginByMobileReq.ProtoReflect.Descriptor instead.
func (*LoginByMobileReq) Descriptor() ([]byte, []int) {
	return file_idl_public_proto_rawDescGZIP(), []int{1}
}

func (x *LoginByMobileReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *LoginByMobileReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

func (x *LoginByMobileReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LoginByMobileReq) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

type LoginRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Expire int64  `protobuf:"varint,2,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *LoginRes) Reset() {
	*x = LoginRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_public_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRes) ProtoMessage() {}

func (x *LoginRes) ProtoReflect() protoreflect.Message {
	mi := &file_idl_public_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRes.ProtoReflect.Descriptor instead.
func (*LoginRes) Descriptor() ([]byte, []int) {
	return file_idl_public_proto_rawDescGZIP(), []int{2}
}

func (x *LoginRes) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginRes) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type SendCaptchaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Mobile    string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
}

func (x *SendCaptchaReq) Reset() {
	*x = SendCaptchaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_public_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCaptchaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCaptchaReq) ProtoMessage() {}

func (x *SendCaptchaReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_public_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCaptchaReq.ProtoReflect.Descriptor instead.
func (*SendCaptchaReq) Descriptor() ([]byte, []int) {
	return file_idl_public_proto_rawDescGZIP(), []int{3}
}

func (x *SendCaptchaReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendCaptchaReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

type SendCaptchaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SendCaptchaRes) Reset() {
	*x = SendCaptchaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_public_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCaptchaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCaptchaRes) ProtoMessage() {}

func (x *SendCaptchaRes) ProtoReflect() protoreflect.Message {
	mi := &file_idl_public_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCaptchaRes.ProtoReflect.Descriptor instead.
func (*SendCaptchaRes) Descriptor() ([]byte, []int) {
	return file_idl_public_proto_rawDescGZIP(), []int{4}
}

func (x *SendCaptchaRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_idl_public_proto protoreflect.FileDescriptor

var file_idl_public_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x64, 0x6c, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x7b, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x38, 0x0a,
	0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x47, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xc8, 0x01, 0x0a,
	0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x72, 0x76, 0x12, 0x3f, 0x0a, 0x0f, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x16, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x75, 0x37, 0x35, 0x36, 0x2f, 0x69, 0x6d, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idl_public_proto_rawDescOnce sync.Once
	file_idl_public_proto_rawDescData = file_idl_public_proto_rawDesc
)

func file_idl_public_proto_rawDescGZIP() []byte {
	file_idl_public_proto_rawDescOnce.Do(func() {
		file_idl_public_proto_rawDescData = protoimpl.X.CompressGZIP(file_idl_public_proto_rawDescData)
	})
	return file_idl_public_proto_rawDescData
}

var file_idl_public_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_idl_public_proto_goTypes = []interface{}{
	(*LoginByPasswordReq)(nil), // 0: public.LoginByPasswordReq
	(*LoginByMobileReq)(nil),   // 1: public.LoginByMobileReq
	(*LoginRes)(nil),           // 2: public.LoginRes
	(*SendCaptchaReq)(nil),     // 3: public.SendCaptchaReq
	(*SendCaptchaRes)(nil),     // 4: public.SendCaptchaRes
}
var file_idl_public_proto_depIdxs = []int32{
	0, // 0: public.PublicSrv.LoginByPassword:input_type -> public.LoginByPasswordReq
	1, // 1: public.PublicSrv.LoginByMobile:input_type -> public.LoginByMobileReq
	3, // 2: public.PublicSrv.SendCaptcha:input_type -> public.SendCaptchaReq
	2, // 3: public.PublicSrv.LoginByPassword:output_type -> public.LoginRes
	2, // 4: public.PublicSrv.LoginByMobile:output_type -> public.LoginRes
	4, // 5: public.PublicSrv.SendCaptcha:output_type -> public.SendCaptchaRes
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_idl_public_proto_init() }
func file_idl_public_proto_init() {
	if File_idl_public_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_idl_public_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginByPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_public_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginByMobileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_public_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_public_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCaptchaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_public_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCaptchaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idl_public_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_idl_public_proto_goTypes,
		DependencyIndexes: file_idl_public_proto_depIdxs,
		MessageInfos:      file_idl_public_proto_msgTypes,
	}.Build()
	File_idl_public_proto = out.File
	file_idl_public_proto_rawDesc = nil
	file_idl_public_proto_goTypes = nil
	file_idl_public_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.8.0. DO NOT EDIT.

type PublicSrv interface {
	LoginByPassword(ctx context.Context, req *LoginByPasswordReq) (res *LoginRes, err error)
	LoginByMobile(ctx context.Context, req *LoginByMobileReq) (res *LoginRes, err error)
	SendCaptcha(ctx context.Context, req *SendCaptchaReq) (res *SendCaptchaRes, err error)
}
