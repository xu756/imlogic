// Code generated by Kitex v0.8.0. DO NOT EDIT.

package usersrv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "imlogic/kitex_gen/base"
	user "imlogic/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userSrvServiceInfo
}

var userSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserSrv"
	handlerType := (*user.UserSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"LoginByPassword":     kitex.NewMethodInfo(loginByPasswordHandler, newUserSrvLoginByPasswordArgs, newUserSrvLoginByPasswordResult, false),
		"LoginByMobile":       kitex.NewMethodInfo(loginByMobileHandler, newUserSrvLoginByMobileArgs, newUserSrvLoginByMobileResult, false),
		"SendCaptcha":         kitex.NewMethodInfo(sendCaptchaHandler, newUserSrvSendCaptchaArgs, newUserSrvSendCaptchaResult, false),
		"GetOneUserInfo":      kitex.NewMethodInfo(getOneUserInfoHandler, newUserSrvGetOneUserInfoArgs, newUserSrvGetOneUserInfoResult, false),
		"GetUserOnlineStatus": kitex.NewMethodInfo(getUserOnlineStatusHandler, newUserSrvGetUserOnlineStatusArgs, newUserSrvGetUserOnlineStatusResult, false),
		"GetUserChatList":     kitex.NewMethodInfo(getUserChatListHandler, newUserSrvGetUserChatListArgs, newUserSrvGetUserChatListResult, false),
		"AddFriend":           kitex.NewMethodInfo(addFriendHandler, newUserSrvAddFriendArgs, newUserSrvAddFriendResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": `idl/user.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func loginByPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvLoginByPasswordArgs)
	realResult := result.(*user.UserSrvLoginByPasswordResult)
	success, err := handler.(user.UserSrv).LoginByPassword(ctx, realArg.LoginByPasswordReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvLoginByPasswordArgs() interface{} {
	return user.NewUserSrvLoginByPasswordArgs()
}

func newUserSrvLoginByPasswordResult() interface{} {
	return user.NewUserSrvLoginByPasswordResult()
}

func loginByMobileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvLoginByMobileArgs)
	realResult := result.(*user.UserSrvLoginByMobileResult)
	success, err := handler.(user.UserSrv).LoginByMobile(ctx, realArg.LoginByMobileReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvLoginByMobileArgs() interface{} {
	return user.NewUserSrvLoginByMobileArgs()
}

func newUserSrvLoginByMobileResult() interface{} {
	return user.NewUserSrvLoginByMobileResult()
}

func sendCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvSendCaptchaArgs)
	realResult := result.(*user.UserSrvSendCaptchaResult)
	success, err := handler.(user.UserSrv).SendCaptcha(ctx, realArg.SendCaptchaReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvSendCaptchaArgs() interface{} {
	return user.NewUserSrvSendCaptchaArgs()
}

func newUserSrvSendCaptchaResult() interface{} {
	return user.NewUserSrvSendCaptchaResult()
}

func getOneUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvGetOneUserInfoArgs)
	realResult := result.(*user.UserSrvGetOneUserInfoResult)
	success, err := handler.(user.UserSrv).GetOneUserInfo(ctx, realArg.GetOneReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvGetOneUserInfoArgs() interface{} {
	return user.NewUserSrvGetOneUserInfoArgs()
}

func newUserSrvGetOneUserInfoResult() interface{} {
	return user.NewUserSrvGetOneUserInfoResult()
}

func getUserOnlineStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvGetUserOnlineStatusArgs)
	realResult := result.(*user.UserSrvGetUserOnlineStatusResult)
	success, err := handler.(user.UserSrv).GetUserOnlineStatus(ctx, realArg.GetOneReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvGetUserOnlineStatusArgs() interface{} {
	return user.NewUserSrvGetUserOnlineStatusArgs()
}

func newUserSrvGetUserOnlineStatusResult() interface{} {
	return user.NewUserSrvGetUserOnlineStatusResult()
}

func getUserChatListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvGetUserChatListArgs)
	realResult := result.(*user.UserSrvGetUserChatListResult)
	success, err := handler.(user.UserSrv).GetUserChatList(ctx, realArg.GetOneReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvGetUserChatListArgs() interface{} {
	return user.NewUserSrvGetUserChatListArgs()
}

func newUserSrvGetUserChatListResult() interface{} {
	return user.NewUserSrvGetUserChatListResult()
}

func addFriendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSrvAddFriendArgs)
	realResult := result.(*user.UserSrvAddFriendResult)
	success, err := handler.(user.UserSrv).AddFriend(ctx, realArg.AddFriendReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSrvAddFriendArgs() interface{} {
	return user.NewUserSrvAddFriendArgs()
}

func newUserSrvAddFriendResult() interface{} {
	return user.NewUserSrvAddFriendResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LoginByPassword(ctx context.Context, loginByPasswordReq *user.LoginByPasswordReq) (r *user.LoginRes, err error) {
	var _args user.UserSrvLoginByPasswordArgs
	_args.LoginByPasswordReq = loginByPasswordReq
	var _result user.UserSrvLoginByPasswordResult
	if err = p.c.Call(ctx, "LoginByPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginByMobile(ctx context.Context, loginByMobileReq *user.LoginByMobileReq) (r *user.LoginRes, err error) {
	var _args user.UserSrvLoginByMobileArgs
	_args.LoginByMobileReq = loginByMobileReq
	var _result user.UserSrvLoginByMobileResult
	if err = p.c.Call(ctx, "LoginByMobile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendCaptcha(ctx context.Context, sendCaptchaReq *user.SendCaptchaReq) (r *base.BoolRes, err error) {
	var _args user.UserSrvSendCaptchaArgs
	_args.SendCaptchaReq = sendCaptchaReq
	var _result user.UserSrvSendCaptchaResult
	if err = p.c.Call(ctx, "SendCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOneUserInfo(ctx context.Context, getOneReq *base.GetOneReq) (r *base.UserInfo, err error) {
	var _args user.UserSrvGetOneUserInfoArgs
	_args.GetOneReq = getOneReq
	var _result user.UserSrvGetOneUserInfoResult
	if err = p.c.Call(ctx, "GetOneUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserOnlineStatus(ctx context.Context, getOneReq *base.GetOneReq) (r *base.BoolRes, err error) {
	var _args user.UserSrvGetUserOnlineStatusArgs
	_args.GetOneReq = getOneReq
	var _result user.UserSrvGetUserOnlineStatusResult
	if err = p.c.Call(ctx, "GetUserOnlineStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserChatList(ctx context.Context, getOneReq *base.GetOneReq) (r []*base.ChatList, err error) {
	var _args user.UserSrvGetUserChatListArgs
	_args.GetOneReq = getOneReq
	var _result user.UserSrvGetUserChatListResult
	if err = p.c.Call(ctx, "GetUserChatList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddFriend(ctx context.Context, addFriendReq *user.AddFriendReq) (r *base.BoolRes, err error) {
	var _args user.UserSrvAddFriendArgs
	_args.AddFriendReq = addFriendReq
	var _result user.UserSrvAddFriendResult
	if err = p.c.Call(ctx, "AddFriend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
