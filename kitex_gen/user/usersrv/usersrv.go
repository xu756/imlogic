// Code generated by Kitex v0.8.0. DO NOT EDIT.

package usersrv

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	user "imlogic/kitex_gen/user"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userSrvServiceInfo
}

var userSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserSrv"
	handlerType := (*user.UserSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"LoginByPassword": kitex.NewMethodInfo(loginByPasswordHandler, newLoginByPasswordArgs, newLoginByPasswordResult, false),
		"LoginByMobile":   kitex.NewMethodInfo(loginByMobileHandler, newLoginByMobileArgs, newLoginByMobileResult, false),
		"SendCaptcha":     kitex.NewMethodInfo(sendCaptchaHandler, newSendCaptchaArgs, newSendCaptchaResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func loginByPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginByPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserSrv).LoginByPassword(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginByPasswordArgs:
		success, err := handler.(user.UserSrv).LoginByPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginByPasswordResult)
		realResult.Success = success
	}
	return nil
}
func newLoginByPasswordArgs() interface{} {
	return &LoginByPasswordArgs{}
}

func newLoginByPasswordResult() interface{} {
	return &LoginByPasswordResult{}
}

type LoginByPasswordArgs struct {
	Req *user.LoginByPasswordReq
}

func (p *LoginByPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginByPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginByPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginByPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginByPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginByPasswordArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginByPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginByPasswordArgs_Req_DEFAULT *user.LoginByPasswordReq

func (p *LoginByPasswordArgs) GetReq() *user.LoginByPasswordReq {
	if !p.IsSetReq() {
		return LoginByPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginByPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginByPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginByPasswordResult struct {
	Success *user.LoginRes
}

var LoginByPasswordResult_Success_DEFAULT *user.LoginRes

func (p *LoginByPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LoginRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginByPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginByPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginByPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginByPasswordResult) Unmarshal(in []byte) error {
	msg := new(user.LoginRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginByPasswordResult) GetSuccess() *user.LoginRes {
	if !p.IsSetSuccess() {
		return LoginByPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginByPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LoginRes)
}

func (p *LoginByPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginByPasswordResult) GetResult() interface{} {
	return p.Success
}

func loginByMobileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginByMobileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserSrv).LoginByMobile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginByMobileArgs:
		success, err := handler.(user.UserSrv).LoginByMobile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginByMobileResult)
		realResult.Success = success
	}
	return nil
}
func newLoginByMobileArgs() interface{} {
	return &LoginByMobileArgs{}
}

func newLoginByMobileResult() interface{} {
	return &LoginByMobileResult{}
}

type LoginByMobileArgs struct {
	Req *user.LoginByMobileReq
}

func (p *LoginByMobileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginByMobileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginByMobileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginByMobileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginByMobileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginByMobileArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginByMobileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginByMobileArgs_Req_DEFAULT *user.LoginByMobileReq

func (p *LoginByMobileArgs) GetReq() *user.LoginByMobileReq {
	if !p.IsSetReq() {
		return LoginByMobileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginByMobileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginByMobileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginByMobileResult struct {
	Success *user.LoginRes
}

var LoginByMobileResult_Success_DEFAULT *user.LoginRes

func (p *LoginByMobileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LoginRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginByMobileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginByMobileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginByMobileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginByMobileResult) Unmarshal(in []byte) error {
	msg := new(user.LoginRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginByMobileResult) GetSuccess() *user.LoginRes {
	if !p.IsSetSuccess() {
		return LoginByMobileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginByMobileResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LoginRes)
}

func (p *LoginByMobileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginByMobileResult) GetResult() interface{} {
	return p.Success
}

func sendCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.SendCaptchaReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserSrv).SendCaptcha(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendCaptchaArgs:
		success, err := handler.(user.UserSrv).SendCaptcha(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendCaptchaResult)
		realResult.Success = success
	}
	return nil
}
func newSendCaptchaArgs() interface{} {
	return &SendCaptchaArgs{}
}

func newSendCaptchaResult() interface{} {
	return &SendCaptchaResult{}
}

type SendCaptchaArgs struct {
	Req *user.SendCaptchaReq
}

func (p *SendCaptchaArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.SendCaptchaReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendCaptchaArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendCaptchaArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendCaptchaArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendCaptchaArgs) Unmarshal(in []byte) error {
	msg := new(user.SendCaptchaReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendCaptchaArgs_Req_DEFAULT *user.SendCaptchaReq

func (p *SendCaptchaArgs) GetReq() *user.SendCaptchaReq {
	if !p.IsSetReq() {
		return SendCaptchaArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendCaptchaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendCaptchaArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendCaptchaResult struct {
	Success *user.SendCaptchaRes
}

var SendCaptchaResult_Success_DEFAULT *user.SendCaptchaRes

func (p *SendCaptchaResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.SendCaptchaRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendCaptchaResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendCaptchaResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendCaptchaResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendCaptchaResult) Unmarshal(in []byte) error {
	msg := new(user.SendCaptchaRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendCaptchaResult) GetSuccess() *user.SendCaptchaRes {
	if !p.IsSetSuccess() {
		return SendCaptchaResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendCaptchaResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.SendCaptchaRes)
}

func (p *SendCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendCaptchaResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LoginByPassword(ctx context.Context, Req *user.LoginByPasswordReq) (r *user.LoginRes, err error) {
	var _args LoginByPasswordArgs
	_args.Req = Req
	var _result LoginByPasswordResult
	if err = p.c.Call(ctx, "LoginByPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginByMobile(ctx context.Context, Req *user.LoginByMobileReq) (r *user.LoginRes, err error) {
	var _args LoginByMobileArgs
	_args.Req = Req
	var _result LoginByMobileResult
	if err = p.c.Call(ctx, "LoginByMobile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendCaptcha(ctx context.Context, Req *user.SendCaptchaReq) (r *user.SendCaptchaRes, err error) {
	var _args SendCaptchaArgs
	_args.Req = Req
	var _result SendCaptchaResult
	if err = p.c.Call(ctx, "SendCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
