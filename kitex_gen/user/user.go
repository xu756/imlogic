// Code generated by thriftgo (0.3.5). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"imlogic/kitex_gen/base"
	"strings"
)

type LoginByPasswordReq struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username,required"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password,required"`
}

func NewLoginByPasswordReq() *LoginByPasswordReq {
	return &LoginByPasswordReq{}
}

func (p *LoginByPasswordReq) InitDefault() {
	*p = LoginByPasswordReq{}
}

func (p *LoginByPasswordReq) GetUsername() (v string) {
	return p.Username
}

func (p *LoginByPasswordReq) GetPassword() (v string) {
	return p.Password
}
func (p *LoginByPasswordReq) SetUsername(val string) {
	p.Username = val
}
func (p *LoginByPasswordReq) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_LoginByPasswordReq = map[int16]string{
	1: "username",
	2: "password",
}

func (p *LoginByPasswordReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginByPasswordReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LoginByPasswordReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}
func (p *LoginByPasswordReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = v
	}
	return nil
}

func (p *LoginByPasswordReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginByPasswordReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginByPasswordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginByPasswordReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginByPasswordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginByPasswordReq(%+v)", *p)

}

func (p *LoginByPasswordReq) DeepEqual(ano *LoginByPasswordReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *LoginByPasswordReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *LoginByPasswordReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type LoginByMobileReq struct {
	Mobile  string `thrift:"mobile,1" frugal:"1,default,string" json:"mobile,required"`
	Captcha string `thrift:"captcha,2" frugal:"2,default,string" json:"captcha,required"`
}

func NewLoginByMobileReq() *LoginByMobileReq {
	return &LoginByMobileReq{}
}

func (p *LoginByMobileReq) InitDefault() {
	*p = LoginByMobileReq{}
}

func (p *LoginByMobileReq) GetMobile() (v string) {
	return p.Mobile
}

func (p *LoginByMobileReq) GetCaptcha() (v string) {
	return p.Captcha
}
func (p *LoginByMobileReq) SetMobile(val string) {
	p.Mobile = val
}
func (p *LoginByMobileReq) SetCaptcha(val string) {
	p.Captcha = val
}

var fieldIDToName_LoginByMobileReq = map[int16]string{
	1: "mobile",
	2: "captcha",
}

func (p *LoginByMobileReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginByMobileReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LoginByMobileReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mobile = v
	}
	return nil
}
func (p *LoginByMobileReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Captcha = v
	}
	return nil
}

func (p *LoginByMobileReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginByMobileReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginByMobileReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginByMobileReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("captcha", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Captcha); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginByMobileReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginByMobileReq(%+v)", *p)

}

func (p *LoginByMobileReq) DeepEqual(ano *LoginByMobileReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field2DeepEqual(ano.Captcha) {
		return false
	}
	return true
}

func (p *LoginByMobileReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *LoginByMobileReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Captcha, src) != 0 {
		return false
	}
	return true
}

type LoginRes struct {
	Token  string `thrift:"token,1" frugal:"1,default,string" json:"token"`
	Expire int64  `thrift:"expire,2" frugal:"2,default,i64" json:"expire"`
}

func NewLoginRes() *LoginRes {
	return &LoginRes{}
}

func (p *LoginRes) InitDefault() {
	*p = LoginRes{}
}

func (p *LoginRes) GetToken() (v string) {
	return p.Token
}

func (p *LoginRes) GetExpire() (v int64) {
	return p.Expire
}
func (p *LoginRes) SetToken(val string) {
	p.Token = val
}
func (p *LoginRes) SetExpire(val int64) {
	p.Expire = val
}

var fieldIDToName_LoginRes = map[int16]string{
	1: "token",
	2: "expire",
}

func (p *LoginRes) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginRes[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LoginRes) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Token = v
	}
	return nil
}
func (p *LoginRes) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Expire = v
	}
	return nil
}

func (p *LoginRes) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginRes"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expire", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Expire); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRes(%+v)", *p)

}

func (p *LoginRes) DeepEqual(ano *LoginRes) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Expire) {
		return false
	}
	return true
}

func (p *LoginRes) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRes) Field2DeepEqual(src int64) bool {

	if p.Expire != src {
		return false
	}
	return true
}

type SendCaptchaReq struct {
	Mobile string `thrift:"mobile,1" frugal:"1,default,string" json:"mobile,required"`
}

func NewSendCaptchaReq() *SendCaptchaReq {
	return &SendCaptchaReq{}
}

func (p *SendCaptchaReq) InitDefault() {
	*p = SendCaptchaReq{}
}

func (p *SendCaptchaReq) GetMobile() (v string) {
	return p.Mobile
}
func (p *SendCaptchaReq) SetMobile(val string) {
	p.Mobile = val
}

var fieldIDToName_SendCaptchaReq = map[int16]string{
	1: "mobile",
}

func (p *SendCaptchaReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SendCaptchaReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SendCaptchaReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mobile = v
	}
	return nil
}

func (p *SendCaptchaReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendCaptchaReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SendCaptchaReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SendCaptchaReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendCaptchaReq(%+v)", *p)

}

func (p *SendCaptchaReq) DeepEqual(ano *SendCaptchaReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Mobile) {
		return false
	}
	return true
}

func (p *SendCaptchaReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}

type Friend struct {
	UserId    int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Alias     string `thrift:"alias,2" frugal:"2,default,string" json:"alias"`
	OwnerDesc string `thrift:"owner_desc,3" frugal:"3,default,string" json:"owner_desc"`
	CreatedAt int64  `thrift:"created_at,4" frugal:"4,default,i64" json:"created_at"`
}

func NewFriend() *Friend {
	return &Friend{}
}

func (p *Friend) InitDefault() {
	*p = Friend{}
}

func (p *Friend) GetUserId() (v int64) {
	return p.UserId
}

func (p *Friend) GetAlias() (v string) {
	return p.Alias
}

func (p *Friend) GetOwnerDesc() (v string) {
	return p.OwnerDesc
}

func (p *Friend) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *Friend) SetUserId(val int64) {
	p.UserId = val
}
func (p *Friend) SetAlias(val string) {
	p.Alias = val
}
func (p *Friend) SetOwnerDesc(val string) {
	p.OwnerDesc = val
}
func (p *Friend) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

var fieldIDToName_Friend = map[int16]string{
	1: "user_id",
	2: "alias",
	3: "owner_desc",
	4: "created_at",
}

func (p *Friend) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Friend[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Friend) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *Friend) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Alias = v
	}
	return nil
}
func (p *Friend) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OwnerDesc = v
	}
	return nil
}
func (p *Friend) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}

func (p *Friend) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Friend"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Friend) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Friend) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("alias", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Alias); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Friend) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner_desc", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OwnerDesc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Friend) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Friend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Friend(%+v)", *p)

}

func (p *Friend) DeepEqual(ano *Friend) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Alias) {
		return false
	}
	if !p.Field3DeepEqual(ano.OwnerDesc) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatedAt) {
		return false
	}
	return true
}

func (p *Friend) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *Friend) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Alias, src) != 0 {
		return false
	}
	return true
}
func (p *Friend) Field3DeepEqual(src string) bool {

	if strings.Compare(p.OwnerDesc, src) != 0 {
		return false
	}
	return true
}
func (p *Friend) Field4DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}

type AddFriendReq struct {
	Owner  int64 `thrift:"owner,1" frugal:"1,default,i64" json:"owner,required"`
	WithId int64 `thrift:"with_id,2" frugal:"2,default,i64" json:"with_id,required"`
}

func NewAddFriendReq() *AddFriendReq {
	return &AddFriendReq{}
}

func (p *AddFriendReq) InitDefault() {
	*p = AddFriendReq{}
}

func (p *AddFriendReq) GetOwner() (v int64) {
	return p.Owner
}

func (p *AddFriendReq) GetWithId() (v int64) {
	return p.WithId
}
func (p *AddFriendReq) SetOwner(val int64) {
	p.Owner = val
}
func (p *AddFriendReq) SetWithId(val int64) {
	p.WithId = val
}

var fieldIDToName_AddFriendReq = map[int16]string{
	1: "owner",
	2: "with_id",
}

func (p *AddFriendReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddFriendReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddFriendReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Owner = v
	}
	return nil
}
func (p *AddFriendReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.WithId = v
	}
	return nil
}

func (p *AddFriendReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddFriendReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Owner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("with_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WithId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddFriendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendReq(%+v)", *p)

}

func (p *AddFriendReq) DeepEqual(ano *AddFriendReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Owner) {
		return false
	}
	if !p.Field2DeepEqual(ano.WithId) {
		return false
	}
	return true
}

func (p *AddFriendReq) Field1DeepEqual(src int64) bool {

	if p.Owner != src {
		return false
	}
	return true
}
func (p *AddFriendReq) Field2DeepEqual(src int64) bool {

	if p.WithId != src {
		return false
	}
	return true
}

type UserSrv interface {
	LoginByPassword(ctx context.Context, loginByPasswordReq *LoginByPasswordReq) (r *LoginRes, err error)

	LoginByMobile(ctx context.Context, loginByMobileReq *LoginByMobileReq) (r *LoginRes, err error)

	SendCaptcha(ctx context.Context, sendCaptchaReq *SendCaptchaReq) (r *base.BoolRes, err error)

	GetOneUserInfo(ctx context.Context, getOneReq *base.GetOneReq) (r *base.UserInfo, err error)

	GetUserOnlineStatus(ctx context.Context, getOneReq *base.GetOneReq) (r *base.BoolRes, err error)

	GetUserChatList(ctx context.Context, getOneReq *base.GetOneReq) (r []*base.ChatList, err error)

	GetUserFriendList(ctx context.Context, getOneReq *base.GetOneReq) (r []*Friend, err error)

	AddFriend(ctx context.Context, addFriendReq *AddFriendReq) (r *base.BoolRes, err error)
}

type UserSrvClient struct {
	c thrift.TClient
}

func NewUserSrvClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserSrvClient {
	return &UserSrvClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewUserSrvClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserSrvClient {
	return &UserSrvClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewUserSrvClient(c thrift.TClient) *UserSrvClient {
	return &UserSrvClient{
		c: c,
	}
}

func (p *UserSrvClient) Client_() thrift.TClient {
	return p.c
}

func (p *UserSrvClient) LoginByPassword(ctx context.Context, loginByPasswordReq *LoginByPasswordReq) (r *LoginRes, err error) {
	var _args UserSrvLoginByPasswordArgs
	_args.LoginByPasswordReq = loginByPasswordReq
	var _result UserSrvLoginByPasswordResult
	if err = p.Client_().Call(ctx, "LoginByPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *UserSrvClient) LoginByMobile(ctx context.Context, loginByMobileReq *LoginByMobileReq) (r *LoginRes, err error) {
	var _args UserSrvLoginByMobileArgs
	_args.LoginByMobileReq = loginByMobileReq
	var _result UserSrvLoginByMobileResult
	if err = p.Client_().Call(ctx, "LoginByMobile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *UserSrvClient) SendCaptcha(ctx context.Context, sendCaptchaReq *SendCaptchaReq) (r *base.BoolRes, err error) {
	var _args UserSrvSendCaptchaArgs
	_args.SendCaptchaReq = sendCaptchaReq
	var _result UserSrvSendCaptchaResult
	if err = p.Client_().Call(ctx, "SendCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *UserSrvClient) GetOneUserInfo(ctx context.Context, getOneReq *base.GetOneReq) (r *base.UserInfo, err error) {
	var _args UserSrvGetOneUserInfoArgs
	_args.GetOneReq = getOneReq
	var _result UserSrvGetOneUserInfoResult
	if err = p.Client_().Call(ctx, "GetOneUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *UserSrvClient) GetUserOnlineStatus(ctx context.Context, getOneReq *base.GetOneReq) (r *base.BoolRes, err error) {
	var _args UserSrvGetUserOnlineStatusArgs
	_args.GetOneReq = getOneReq
	var _result UserSrvGetUserOnlineStatusResult
	if err = p.Client_().Call(ctx, "GetUserOnlineStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *UserSrvClient) GetUserChatList(ctx context.Context, getOneReq *base.GetOneReq) (r []*base.ChatList, err error) {
	var _args UserSrvGetUserChatListArgs
	_args.GetOneReq = getOneReq
	var _result UserSrvGetUserChatListResult
	if err = p.Client_().Call(ctx, "GetUserChatList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *UserSrvClient) GetUserFriendList(ctx context.Context, getOneReq *base.GetOneReq) (r []*Friend, err error) {
	var _args UserSrvGetUserFriendListArgs
	_args.GetOneReq = getOneReq
	var _result UserSrvGetUserFriendListResult
	if err = p.Client_().Call(ctx, "GetUserFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *UserSrvClient) AddFriend(ctx context.Context, addFriendReq *AddFriendReq) (r *base.BoolRes, err error) {
	var _args UserSrvAddFriendArgs
	_args.AddFriendReq = addFriendReq
	var _result UserSrvAddFriendResult
	if err = p.Client_().Call(ctx, "AddFriend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type UserSrvProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserSrv
}

func (p *UserSrvProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserSrvProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserSrvProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserSrvProcessor(handler UserSrv) *UserSrvProcessor {
	self := &UserSrvProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("LoginByPassword", &userSrvProcessorLoginByPassword{handler: handler})
	self.AddToProcessorMap("LoginByMobile", &userSrvProcessorLoginByMobile{handler: handler})
	self.AddToProcessorMap("SendCaptcha", &userSrvProcessorSendCaptcha{handler: handler})
	self.AddToProcessorMap("GetOneUserInfo", &userSrvProcessorGetOneUserInfo{handler: handler})
	self.AddToProcessorMap("GetUserOnlineStatus", &userSrvProcessorGetUserOnlineStatus{handler: handler})
	self.AddToProcessorMap("GetUserChatList", &userSrvProcessorGetUserChatList{handler: handler})
	self.AddToProcessorMap("GetUserFriendList", &userSrvProcessorGetUserFriendList{handler: handler})
	self.AddToProcessorMap("AddFriend", &userSrvProcessorAddFriend{handler: handler})
	return self
}
func (p *UserSrvProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type userSrvProcessorLoginByPassword struct {
	handler UserSrv
}

func (p *userSrvProcessorLoginByPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserSrvLoginByPasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("LoginByPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UserSrvLoginByPasswordResult{}
	var retval *LoginRes
	if retval, err2 = p.handler.LoginByPassword(ctx, args.LoginByPasswordReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing LoginByPassword: "+err2.Error())
		oprot.WriteMessageBegin("LoginByPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("LoginByPassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userSrvProcessorLoginByMobile struct {
	handler UserSrv
}

func (p *userSrvProcessorLoginByMobile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserSrvLoginByMobileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("LoginByMobile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UserSrvLoginByMobileResult{}
	var retval *LoginRes
	if retval, err2 = p.handler.LoginByMobile(ctx, args.LoginByMobileReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing LoginByMobile: "+err2.Error())
		oprot.WriteMessageBegin("LoginByMobile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("LoginByMobile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userSrvProcessorSendCaptcha struct {
	handler UserSrv
}

func (p *userSrvProcessorSendCaptcha) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserSrvSendCaptchaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendCaptcha", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UserSrvSendCaptchaResult{}
	var retval *base.BoolRes
	if retval, err2 = p.handler.SendCaptcha(ctx, args.SendCaptchaReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendCaptcha: "+err2.Error())
		oprot.WriteMessageBegin("SendCaptcha", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendCaptcha", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userSrvProcessorGetOneUserInfo struct {
	handler UserSrv
}

func (p *userSrvProcessorGetOneUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserSrvGetOneUserInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetOneUserInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UserSrvGetOneUserInfoResult{}
	var retval *base.UserInfo
	if retval, err2 = p.handler.GetOneUserInfo(ctx, args.GetOneReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetOneUserInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetOneUserInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetOneUserInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userSrvProcessorGetUserOnlineStatus struct {
	handler UserSrv
}

func (p *userSrvProcessorGetUserOnlineStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserSrvGetUserOnlineStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserOnlineStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UserSrvGetUserOnlineStatusResult{}
	var retval *base.BoolRes
	if retval, err2 = p.handler.GetUserOnlineStatus(ctx, args.GetOneReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserOnlineStatus: "+err2.Error())
		oprot.WriteMessageBegin("GetUserOnlineStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserOnlineStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userSrvProcessorGetUserChatList struct {
	handler UserSrv
}

func (p *userSrvProcessorGetUserChatList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserSrvGetUserChatListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserChatList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UserSrvGetUserChatListResult{}
	var retval []*base.ChatList
	if retval, err2 = p.handler.GetUserChatList(ctx, args.GetOneReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserChatList: "+err2.Error())
		oprot.WriteMessageBegin("GetUserChatList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserChatList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userSrvProcessorGetUserFriendList struct {
	handler UserSrv
}

func (p *userSrvProcessorGetUserFriendList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserSrvGetUserFriendListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserFriendList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UserSrvGetUserFriendListResult{}
	var retval []*Friend
	if retval, err2 = p.handler.GetUserFriendList(ctx, args.GetOneReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserFriendList: "+err2.Error())
		oprot.WriteMessageBegin("GetUserFriendList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserFriendList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userSrvProcessorAddFriend struct {
	handler UserSrv
}

func (p *userSrvProcessorAddFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserSrvAddFriendArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddFriend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := UserSrvAddFriendResult{}
	var retval *base.BoolRes
	if retval, err2 = p.handler.AddFriend(ctx, args.AddFriendReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddFriend: "+err2.Error())
		oprot.WriteMessageBegin("AddFriend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddFriend", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type UserSrvLoginByPasswordArgs struct {
	LoginByPasswordReq *LoginByPasswordReq `thrift:"loginByPasswordReq,1" frugal:"1,default,LoginByPasswordReq" json:"loginByPasswordReq"`
}

func NewUserSrvLoginByPasswordArgs() *UserSrvLoginByPasswordArgs {
	return &UserSrvLoginByPasswordArgs{}
}

func (p *UserSrvLoginByPasswordArgs) InitDefault() {
	*p = UserSrvLoginByPasswordArgs{}
}

var UserSrvLoginByPasswordArgs_LoginByPasswordReq_DEFAULT *LoginByPasswordReq

func (p *UserSrvLoginByPasswordArgs) GetLoginByPasswordReq() (v *LoginByPasswordReq) {
	if !p.IsSetLoginByPasswordReq() {
		return UserSrvLoginByPasswordArgs_LoginByPasswordReq_DEFAULT
	}
	return p.LoginByPasswordReq
}
func (p *UserSrvLoginByPasswordArgs) SetLoginByPasswordReq(val *LoginByPasswordReq) {
	p.LoginByPasswordReq = val
}

var fieldIDToName_UserSrvLoginByPasswordArgs = map[int16]string{
	1: "loginByPasswordReq",
}

func (p *UserSrvLoginByPasswordArgs) IsSetLoginByPasswordReq() bool {
	return p.LoginByPasswordReq != nil
}

func (p *UserSrvLoginByPasswordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvLoginByPasswordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvLoginByPasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.LoginByPasswordReq = NewLoginByPasswordReq()
	if err := p.LoginByPasswordReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvLoginByPasswordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginByPassword_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvLoginByPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loginByPasswordReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.LoginByPasswordReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserSrvLoginByPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvLoginByPasswordArgs(%+v)", *p)

}

func (p *UserSrvLoginByPasswordArgs) DeepEqual(ano *UserSrvLoginByPasswordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LoginByPasswordReq) {
		return false
	}
	return true
}

func (p *UserSrvLoginByPasswordArgs) Field1DeepEqual(src *LoginByPasswordReq) bool {

	if !p.LoginByPasswordReq.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvLoginByPasswordResult struct {
	Success *LoginRes `thrift:"success,0,optional" frugal:"0,optional,LoginRes" json:"success,omitempty"`
}

func NewUserSrvLoginByPasswordResult() *UserSrvLoginByPasswordResult {
	return &UserSrvLoginByPasswordResult{}
}

func (p *UserSrvLoginByPasswordResult) InitDefault() {
	*p = UserSrvLoginByPasswordResult{}
}

var UserSrvLoginByPasswordResult_Success_DEFAULT *LoginRes

func (p *UserSrvLoginByPasswordResult) GetSuccess() (v *LoginRes) {
	if !p.IsSetSuccess() {
		return UserSrvLoginByPasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserSrvLoginByPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginRes)
}

var fieldIDToName_UserSrvLoginByPasswordResult = map[int16]string{
	0: "success",
}

func (p *UserSrvLoginByPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSrvLoginByPasswordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvLoginByPasswordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvLoginByPasswordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewLoginRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvLoginByPasswordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginByPassword_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvLoginByPasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UserSrvLoginByPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvLoginByPasswordResult(%+v)", *p)

}

func (p *UserSrvLoginByPasswordResult) DeepEqual(ano *UserSrvLoginByPasswordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserSrvLoginByPasswordResult) Field0DeepEqual(src *LoginRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvLoginByMobileArgs struct {
	LoginByMobileReq *LoginByMobileReq `thrift:"loginByMobileReq,1" frugal:"1,default,LoginByMobileReq" json:"loginByMobileReq"`
}

func NewUserSrvLoginByMobileArgs() *UserSrvLoginByMobileArgs {
	return &UserSrvLoginByMobileArgs{}
}

func (p *UserSrvLoginByMobileArgs) InitDefault() {
	*p = UserSrvLoginByMobileArgs{}
}

var UserSrvLoginByMobileArgs_LoginByMobileReq_DEFAULT *LoginByMobileReq

func (p *UserSrvLoginByMobileArgs) GetLoginByMobileReq() (v *LoginByMobileReq) {
	if !p.IsSetLoginByMobileReq() {
		return UserSrvLoginByMobileArgs_LoginByMobileReq_DEFAULT
	}
	return p.LoginByMobileReq
}
func (p *UserSrvLoginByMobileArgs) SetLoginByMobileReq(val *LoginByMobileReq) {
	p.LoginByMobileReq = val
}

var fieldIDToName_UserSrvLoginByMobileArgs = map[int16]string{
	1: "loginByMobileReq",
}

func (p *UserSrvLoginByMobileArgs) IsSetLoginByMobileReq() bool {
	return p.LoginByMobileReq != nil
}

func (p *UserSrvLoginByMobileArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvLoginByMobileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvLoginByMobileArgs) ReadField1(iprot thrift.TProtocol) error {
	p.LoginByMobileReq = NewLoginByMobileReq()
	if err := p.LoginByMobileReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvLoginByMobileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginByMobile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvLoginByMobileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loginByMobileReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.LoginByMobileReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserSrvLoginByMobileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvLoginByMobileArgs(%+v)", *p)

}

func (p *UserSrvLoginByMobileArgs) DeepEqual(ano *UserSrvLoginByMobileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LoginByMobileReq) {
		return false
	}
	return true
}

func (p *UserSrvLoginByMobileArgs) Field1DeepEqual(src *LoginByMobileReq) bool {

	if !p.LoginByMobileReq.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvLoginByMobileResult struct {
	Success *LoginRes `thrift:"success,0,optional" frugal:"0,optional,LoginRes" json:"success,omitempty"`
}

func NewUserSrvLoginByMobileResult() *UserSrvLoginByMobileResult {
	return &UserSrvLoginByMobileResult{}
}

func (p *UserSrvLoginByMobileResult) InitDefault() {
	*p = UserSrvLoginByMobileResult{}
}

var UserSrvLoginByMobileResult_Success_DEFAULT *LoginRes

func (p *UserSrvLoginByMobileResult) GetSuccess() (v *LoginRes) {
	if !p.IsSetSuccess() {
		return UserSrvLoginByMobileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserSrvLoginByMobileResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginRes)
}

var fieldIDToName_UserSrvLoginByMobileResult = map[int16]string{
	0: "success",
}

func (p *UserSrvLoginByMobileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSrvLoginByMobileResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvLoginByMobileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvLoginByMobileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewLoginRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvLoginByMobileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginByMobile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvLoginByMobileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UserSrvLoginByMobileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvLoginByMobileResult(%+v)", *p)

}

func (p *UserSrvLoginByMobileResult) DeepEqual(ano *UserSrvLoginByMobileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserSrvLoginByMobileResult) Field0DeepEqual(src *LoginRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvSendCaptchaArgs struct {
	SendCaptchaReq *SendCaptchaReq `thrift:"sendCaptchaReq,1" frugal:"1,default,SendCaptchaReq" json:"sendCaptchaReq"`
}

func NewUserSrvSendCaptchaArgs() *UserSrvSendCaptchaArgs {
	return &UserSrvSendCaptchaArgs{}
}

func (p *UserSrvSendCaptchaArgs) InitDefault() {
	*p = UserSrvSendCaptchaArgs{}
}

var UserSrvSendCaptchaArgs_SendCaptchaReq_DEFAULT *SendCaptchaReq

func (p *UserSrvSendCaptchaArgs) GetSendCaptchaReq() (v *SendCaptchaReq) {
	if !p.IsSetSendCaptchaReq() {
		return UserSrvSendCaptchaArgs_SendCaptchaReq_DEFAULT
	}
	return p.SendCaptchaReq
}
func (p *UserSrvSendCaptchaArgs) SetSendCaptchaReq(val *SendCaptchaReq) {
	p.SendCaptchaReq = val
}

var fieldIDToName_UserSrvSendCaptchaArgs = map[int16]string{
	1: "sendCaptchaReq",
}

func (p *UserSrvSendCaptchaArgs) IsSetSendCaptchaReq() bool {
	return p.SendCaptchaReq != nil
}

func (p *UserSrvSendCaptchaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvSendCaptchaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvSendCaptchaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.SendCaptchaReq = NewSendCaptchaReq()
	if err := p.SendCaptchaReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvSendCaptchaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendCaptcha_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvSendCaptchaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sendCaptchaReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SendCaptchaReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserSrvSendCaptchaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvSendCaptchaArgs(%+v)", *p)

}

func (p *UserSrvSendCaptchaArgs) DeepEqual(ano *UserSrvSendCaptchaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SendCaptchaReq) {
		return false
	}
	return true
}

func (p *UserSrvSendCaptchaArgs) Field1DeepEqual(src *SendCaptchaReq) bool {

	if !p.SendCaptchaReq.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvSendCaptchaResult struct {
	Success *base.BoolRes `thrift:"success,0,optional" frugal:"0,optional,base.BoolRes" json:"success,omitempty"`
}

func NewUserSrvSendCaptchaResult() *UserSrvSendCaptchaResult {
	return &UserSrvSendCaptchaResult{}
}

func (p *UserSrvSendCaptchaResult) InitDefault() {
	*p = UserSrvSendCaptchaResult{}
}

var UserSrvSendCaptchaResult_Success_DEFAULT *base.BoolRes

func (p *UserSrvSendCaptchaResult) GetSuccess() (v *base.BoolRes) {
	if !p.IsSetSuccess() {
		return UserSrvSendCaptchaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserSrvSendCaptchaResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BoolRes)
}

var fieldIDToName_UserSrvSendCaptchaResult = map[int16]string{
	0: "success",
}

func (p *UserSrvSendCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSrvSendCaptchaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvSendCaptchaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvSendCaptchaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = base.NewBoolRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvSendCaptchaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendCaptcha_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvSendCaptchaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UserSrvSendCaptchaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvSendCaptchaResult(%+v)", *p)

}

func (p *UserSrvSendCaptchaResult) DeepEqual(ano *UserSrvSendCaptchaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserSrvSendCaptchaResult) Field0DeepEqual(src *base.BoolRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvGetOneUserInfoArgs struct {
	GetOneReq *base.GetOneReq `thrift:"getOneReq,1" frugal:"1,default,base.GetOneReq" json:"getOneReq"`
}

func NewUserSrvGetOneUserInfoArgs() *UserSrvGetOneUserInfoArgs {
	return &UserSrvGetOneUserInfoArgs{}
}

func (p *UserSrvGetOneUserInfoArgs) InitDefault() {
	*p = UserSrvGetOneUserInfoArgs{}
}

var UserSrvGetOneUserInfoArgs_GetOneReq_DEFAULT *base.GetOneReq

func (p *UserSrvGetOneUserInfoArgs) GetGetOneReq() (v *base.GetOneReq) {
	if !p.IsSetGetOneReq() {
		return UserSrvGetOneUserInfoArgs_GetOneReq_DEFAULT
	}
	return p.GetOneReq
}
func (p *UserSrvGetOneUserInfoArgs) SetGetOneReq(val *base.GetOneReq) {
	p.GetOneReq = val
}

var fieldIDToName_UserSrvGetOneUserInfoArgs = map[int16]string{
	1: "getOneReq",
}

func (p *UserSrvGetOneUserInfoArgs) IsSetGetOneReq() bool {
	return p.GetOneReq != nil
}

func (p *UserSrvGetOneUserInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvGetOneUserInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvGetOneUserInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.GetOneReq = base.NewGetOneReq()
	if err := p.GetOneReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvGetOneUserInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOneUserInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvGetOneUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("getOneReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GetOneReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserSrvGetOneUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvGetOneUserInfoArgs(%+v)", *p)

}

func (p *UserSrvGetOneUserInfoArgs) DeepEqual(ano *UserSrvGetOneUserInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GetOneReq) {
		return false
	}
	return true
}

func (p *UserSrvGetOneUserInfoArgs) Field1DeepEqual(src *base.GetOneReq) bool {

	if !p.GetOneReq.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvGetOneUserInfoResult struct {
	Success *base.UserInfo `thrift:"success,0,optional" frugal:"0,optional,base.UserInfo" json:"success,omitempty"`
}

func NewUserSrvGetOneUserInfoResult() *UserSrvGetOneUserInfoResult {
	return &UserSrvGetOneUserInfoResult{}
}

func (p *UserSrvGetOneUserInfoResult) InitDefault() {
	*p = UserSrvGetOneUserInfoResult{}
}

var UserSrvGetOneUserInfoResult_Success_DEFAULT *base.UserInfo

func (p *UserSrvGetOneUserInfoResult) GetSuccess() (v *base.UserInfo) {
	if !p.IsSetSuccess() {
		return UserSrvGetOneUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserSrvGetOneUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.UserInfo)
}

var fieldIDToName_UserSrvGetOneUserInfoResult = map[int16]string{
	0: "success",
}

func (p *UserSrvGetOneUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSrvGetOneUserInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvGetOneUserInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvGetOneUserInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = base.NewUserInfo()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvGetOneUserInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOneUserInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvGetOneUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UserSrvGetOneUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvGetOneUserInfoResult(%+v)", *p)

}

func (p *UserSrvGetOneUserInfoResult) DeepEqual(ano *UserSrvGetOneUserInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserSrvGetOneUserInfoResult) Field0DeepEqual(src *base.UserInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvGetUserOnlineStatusArgs struct {
	GetOneReq *base.GetOneReq `thrift:"getOneReq,1" frugal:"1,default,base.GetOneReq" json:"getOneReq"`
}

func NewUserSrvGetUserOnlineStatusArgs() *UserSrvGetUserOnlineStatusArgs {
	return &UserSrvGetUserOnlineStatusArgs{}
}

func (p *UserSrvGetUserOnlineStatusArgs) InitDefault() {
	*p = UserSrvGetUserOnlineStatusArgs{}
}

var UserSrvGetUserOnlineStatusArgs_GetOneReq_DEFAULT *base.GetOneReq

func (p *UserSrvGetUserOnlineStatusArgs) GetGetOneReq() (v *base.GetOneReq) {
	if !p.IsSetGetOneReq() {
		return UserSrvGetUserOnlineStatusArgs_GetOneReq_DEFAULT
	}
	return p.GetOneReq
}
func (p *UserSrvGetUserOnlineStatusArgs) SetGetOneReq(val *base.GetOneReq) {
	p.GetOneReq = val
}

var fieldIDToName_UserSrvGetUserOnlineStatusArgs = map[int16]string{
	1: "getOneReq",
}

func (p *UserSrvGetUserOnlineStatusArgs) IsSetGetOneReq() bool {
	return p.GetOneReq != nil
}

func (p *UserSrvGetUserOnlineStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvGetUserOnlineStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvGetUserOnlineStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.GetOneReq = base.NewGetOneReq()
	if err := p.GetOneReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvGetUserOnlineStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserOnlineStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvGetUserOnlineStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("getOneReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GetOneReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserSrvGetUserOnlineStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvGetUserOnlineStatusArgs(%+v)", *p)

}

func (p *UserSrvGetUserOnlineStatusArgs) DeepEqual(ano *UserSrvGetUserOnlineStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GetOneReq) {
		return false
	}
	return true
}

func (p *UserSrvGetUserOnlineStatusArgs) Field1DeepEqual(src *base.GetOneReq) bool {

	if !p.GetOneReq.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvGetUserOnlineStatusResult struct {
	Success *base.BoolRes `thrift:"success,0,optional" frugal:"0,optional,base.BoolRes" json:"success,omitempty"`
}

func NewUserSrvGetUserOnlineStatusResult() *UserSrvGetUserOnlineStatusResult {
	return &UserSrvGetUserOnlineStatusResult{}
}

func (p *UserSrvGetUserOnlineStatusResult) InitDefault() {
	*p = UserSrvGetUserOnlineStatusResult{}
}

var UserSrvGetUserOnlineStatusResult_Success_DEFAULT *base.BoolRes

func (p *UserSrvGetUserOnlineStatusResult) GetSuccess() (v *base.BoolRes) {
	if !p.IsSetSuccess() {
		return UserSrvGetUserOnlineStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserSrvGetUserOnlineStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BoolRes)
}

var fieldIDToName_UserSrvGetUserOnlineStatusResult = map[int16]string{
	0: "success",
}

func (p *UserSrvGetUserOnlineStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSrvGetUserOnlineStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvGetUserOnlineStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvGetUserOnlineStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = base.NewBoolRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvGetUserOnlineStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserOnlineStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvGetUserOnlineStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UserSrvGetUserOnlineStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvGetUserOnlineStatusResult(%+v)", *p)

}

func (p *UserSrvGetUserOnlineStatusResult) DeepEqual(ano *UserSrvGetUserOnlineStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserSrvGetUserOnlineStatusResult) Field0DeepEqual(src *base.BoolRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvGetUserChatListArgs struct {
	GetOneReq *base.GetOneReq `thrift:"getOneReq,1" frugal:"1,default,base.GetOneReq" json:"getOneReq"`
}

func NewUserSrvGetUserChatListArgs() *UserSrvGetUserChatListArgs {
	return &UserSrvGetUserChatListArgs{}
}

func (p *UserSrvGetUserChatListArgs) InitDefault() {
	*p = UserSrvGetUserChatListArgs{}
}

var UserSrvGetUserChatListArgs_GetOneReq_DEFAULT *base.GetOneReq

func (p *UserSrvGetUserChatListArgs) GetGetOneReq() (v *base.GetOneReq) {
	if !p.IsSetGetOneReq() {
		return UserSrvGetUserChatListArgs_GetOneReq_DEFAULT
	}
	return p.GetOneReq
}
func (p *UserSrvGetUserChatListArgs) SetGetOneReq(val *base.GetOneReq) {
	p.GetOneReq = val
}

var fieldIDToName_UserSrvGetUserChatListArgs = map[int16]string{
	1: "getOneReq",
}

func (p *UserSrvGetUserChatListArgs) IsSetGetOneReq() bool {
	return p.GetOneReq != nil
}

func (p *UserSrvGetUserChatListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvGetUserChatListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvGetUserChatListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.GetOneReq = base.NewGetOneReq()
	if err := p.GetOneReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvGetUserChatListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserChatList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvGetUserChatListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("getOneReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GetOneReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserSrvGetUserChatListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvGetUserChatListArgs(%+v)", *p)

}

func (p *UserSrvGetUserChatListArgs) DeepEqual(ano *UserSrvGetUserChatListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GetOneReq) {
		return false
	}
	return true
}

func (p *UserSrvGetUserChatListArgs) Field1DeepEqual(src *base.GetOneReq) bool {

	if !p.GetOneReq.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvGetUserChatListResult struct {
	Success []*base.ChatList `thrift:"success,0,optional" frugal:"0,optional,list<base.ChatList>" json:"success,omitempty"`
}

func NewUserSrvGetUserChatListResult() *UserSrvGetUserChatListResult {
	return &UserSrvGetUserChatListResult{}
}

func (p *UserSrvGetUserChatListResult) InitDefault() {
	*p = UserSrvGetUserChatListResult{}
}

var UserSrvGetUserChatListResult_Success_DEFAULT []*base.ChatList

func (p *UserSrvGetUserChatListResult) GetSuccess() (v []*base.ChatList) {
	if !p.IsSetSuccess() {
		return UserSrvGetUserChatListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserSrvGetUserChatListResult) SetSuccess(x interface{}) {
	p.Success = x.([]*base.ChatList)
}

var fieldIDToName_UserSrvGetUserChatListResult = map[int16]string{
	0: "success",
}

func (p *UserSrvGetUserChatListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSrvGetUserChatListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvGetUserChatListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvGetUserChatListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*base.ChatList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewChatList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvGetUserChatListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserChatList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvGetUserChatListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UserSrvGetUserChatListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvGetUserChatListResult(%+v)", *p)

}

func (p *UserSrvGetUserChatListResult) DeepEqual(ano *UserSrvGetUserChatListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserSrvGetUserChatListResult) Field0DeepEqual(src []*base.ChatList) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type UserSrvGetUserFriendListArgs struct {
	GetOneReq *base.GetOneReq `thrift:"getOneReq,1" frugal:"1,default,base.GetOneReq" json:"getOneReq"`
}

func NewUserSrvGetUserFriendListArgs() *UserSrvGetUserFriendListArgs {
	return &UserSrvGetUserFriendListArgs{}
}

func (p *UserSrvGetUserFriendListArgs) InitDefault() {
	*p = UserSrvGetUserFriendListArgs{}
}

var UserSrvGetUserFriendListArgs_GetOneReq_DEFAULT *base.GetOneReq

func (p *UserSrvGetUserFriendListArgs) GetGetOneReq() (v *base.GetOneReq) {
	if !p.IsSetGetOneReq() {
		return UserSrvGetUserFriendListArgs_GetOneReq_DEFAULT
	}
	return p.GetOneReq
}
func (p *UserSrvGetUserFriendListArgs) SetGetOneReq(val *base.GetOneReq) {
	p.GetOneReq = val
}

var fieldIDToName_UserSrvGetUserFriendListArgs = map[int16]string{
	1: "getOneReq",
}

func (p *UserSrvGetUserFriendListArgs) IsSetGetOneReq() bool {
	return p.GetOneReq != nil
}

func (p *UserSrvGetUserFriendListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvGetUserFriendListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvGetUserFriendListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.GetOneReq = base.NewGetOneReq()
	if err := p.GetOneReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvGetUserFriendListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserFriendList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvGetUserFriendListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("getOneReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GetOneReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserSrvGetUserFriendListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvGetUserFriendListArgs(%+v)", *p)

}

func (p *UserSrvGetUserFriendListArgs) DeepEqual(ano *UserSrvGetUserFriendListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GetOneReq) {
		return false
	}
	return true
}

func (p *UserSrvGetUserFriendListArgs) Field1DeepEqual(src *base.GetOneReq) bool {

	if !p.GetOneReq.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvGetUserFriendListResult struct {
	Success []*Friend `thrift:"success,0,optional" frugal:"0,optional,list<Friend>" json:"success,omitempty"`
}

func NewUserSrvGetUserFriendListResult() *UserSrvGetUserFriendListResult {
	return &UserSrvGetUserFriendListResult{}
}

func (p *UserSrvGetUserFriendListResult) InitDefault() {
	*p = UserSrvGetUserFriendListResult{}
}

var UserSrvGetUserFriendListResult_Success_DEFAULT []*Friend

func (p *UserSrvGetUserFriendListResult) GetSuccess() (v []*Friend) {
	if !p.IsSetSuccess() {
		return UserSrvGetUserFriendListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserSrvGetUserFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.([]*Friend)
}

var fieldIDToName_UserSrvGetUserFriendListResult = map[int16]string{
	0: "success",
}

func (p *UserSrvGetUserFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSrvGetUserFriendListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvGetUserFriendListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvGetUserFriendListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*Friend, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewFriend()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvGetUserFriendListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserFriendList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvGetUserFriendListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UserSrvGetUserFriendListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvGetUserFriendListResult(%+v)", *p)

}

func (p *UserSrvGetUserFriendListResult) DeepEqual(ano *UserSrvGetUserFriendListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserSrvGetUserFriendListResult) Field0DeepEqual(src []*Friend) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type UserSrvAddFriendArgs struct {
	AddFriendReq *AddFriendReq `thrift:"addFriendReq,1" frugal:"1,default,AddFriendReq" json:"addFriendReq"`
}

func NewUserSrvAddFriendArgs() *UserSrvAddFriendArgs {
	return &UserSrvAddFriendArgs{}
}

func (p *UserSrvAddFriendArgs) InitDefault() {
	*p = UserSrvAddFriendArgs{}
}

var UserSrvAddFriendArgs_AddFriendReq_DEFAULT *AddFriendReq

func (p *UserSrvAddFriendArgs) GetAddFriendReq() (v *AddFriendReq) {
	if !p.IsSetAddFriendReq() {
		return UserSrvAddFriendArgs_AddFriendReq_DEFAULT
	}
	return p.AddFriendReq
}
func (p *UserSrvAddFriendArgs) SetAddFriendReq(val *AddFriendReq) {
	p.AddFriendReq = val
}

var fieldIDToName_UserSrvAddFriendArgs = map[int16]string{
	1: "addFriendReq",
}

func (p *UserSrvAddFriendArgs) IsSetAddFriendReq() bool {
	return p.AddFriendReq != nil
}

func (p *UserSrvAddFriendArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvAddFriendArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvAddFriendArgs) ReadField1(iprot thrift.TProtocol) error {
	p.AddFriendReq = NewAddFriendReq()
	if err := p.AddFriendReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvAddFriendArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddFriend_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvAddFriendArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("addFriendReq", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.AddFriendReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserSrvAddFriendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvAddFriendArgs(%+v)", *p)

}

func (p *UserSrvAddFriendArgs) DeepEqual(ano *UserSrvAddFriendArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddFriendReq) {
		return false
	}
	return true
}

func (p *UserSrvAddFriendArgs) Field1DeepEqual(src *AddFriendReq) bool {

	if !p.AddFriendReq.DeepEqual(src) {
		return false
	}
	return true
}

type UserSrvAddFriendResult struct {
	Success *base.BoolRes `thrift:"success,0,optional" frugal:"0,optional,base.BoolRes" json:"success,omitempty"`
}

func NewUserSrvAddFriendResult() *UserSrvAddFriendResult {
	return &UserSrvAddFriendResult{}
}

func (p *UserSrvAddFriendResult) InitDefault() {
	*p = UserSrvAddFriendResult{}
}

var UserSrvAddFriendResult_Success_DEFAULT *base.BoolRes

func (p *UserSrvAddFriendResult) GetSuccess() (v *base.BoolRes) {
	if !p.IsSetSuccess() {
		return UserSrvAddFriendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserSrvAddFriendResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BoolRes)
}

var fieldIDToName_UserSrvAddFriendResult = map[int16]string{
	0: "success",
}

func (p *UserSrvAddFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSrvAddFriendResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserSrvAddFriendResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserSrvAddFriendResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = base.NewBoolRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserSrvAddFriendResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddFriend_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserSrvAddFriendResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *UserSrvAddFriendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSrvAddFriendResult(%+v)", *p)

}

func (p *UserSrvAddFriendResult) DeepEqual(ano *UserSrvAddFriendResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserSrvAddFriendResult) Field0DeepEqual(src *base.BoolRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
